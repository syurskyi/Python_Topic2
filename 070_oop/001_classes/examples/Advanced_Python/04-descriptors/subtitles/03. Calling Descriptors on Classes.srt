1
00:00:00,866 --> 00:00:02,780
One aspect of the descriptor protocol we

2
00:00:02,780 --> 00:00:05,232
haven't yet addressed is what happens when

3
00:00:05,232 --> 00:00:08,491
we retrieve a descriptor from a class. As

4
00:00:08,491 --> 00:00:10,511
we've seen, instance attribute retrieval

5
00:00:10,511 --> 00:00:13,309
works fine; however, class attribute

6
00:00:13,309 --> 00:00:16,661
retrieval does not. In such cases, the

7
00:00:16,661 --> 00:00:19,043
instance argument of dunder get will be

8
00:00:19,043 --> 00:00:22,165
set to none, which causes a failure with

9
00:00:22,165 --> 00:00:24,303
the WeakKeyDictionary used for attribute

10
00:00:24,303 --> 00:00:27,881
storage because we cannot create a weak

11
00:00:27,881 --> 00:00:30,794
reference to none. We can use this fact to

12
00:00:30,794 --> 00:00:32,405
detect when a descriptor value is being

13
00:00:32,405 --> 00:00:36,471
retrieved via a class attribute by testing

14
00:00:36,471 --> 00:00:40,152
the instance argument against none. In the

15
00:00:40,152 --> 00:00:42,093
dunder get implementation, when instance

16
00:00:42,093 --> 00:00:45,508
is none we do what seems most natural, and

17
00:00:45,508 --> 00:00:47,719
we turn the descriptor object itself

18
00:00:47,719 --> 00:00:49,952
rather than performing the attribute

19
00:00:49,952 --> 00:00:53,861
lookup. With the revised code we see more

20
00:00:53,861 --> 00:00:59,019
helpful behavior. If you need to query or

21
00:00:59,019 --> 00:01:01,988
manipulate the class which contains the

22
00:01:01,988 --> 00:01:04,747
descriptor object you can get hold of this

23
00:01:04,747 --> 00:01:07,022
through the owner argument of the dunder

24
00:01:07,022 --> 00:01:09,367
get method, which in this case, will

25
00:01:09,367 --> 00:01:12,264
contain a reference to the Planet class.

26
00:01:12,264 --> 00:01:14,335
In many cases, though, you won't need to

27
00:01:14,335 --> 00:01:22,000
use Owner, so you can do what we've done and just ignore it.

