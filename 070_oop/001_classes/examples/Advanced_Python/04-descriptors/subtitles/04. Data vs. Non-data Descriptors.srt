1
00:00:00,484 --> 00:00:03,676
You may here the terms data descriptor and

2
00:00:03,676 --> 00:00:06,928
non-data descriptor, but what do they

3
00:00:06,928 --> 00:00:09,646
mean? A non-data descriptor is a

4
00:00:09,646 --> 00:00:11,751
descriptor which implements only the

5
00:00:11,751 --> 00:00:16,549
dunder get method, and so is read only. So

6
00:00:16,549 --> 00:00:19,427
called data descriptors sport both the

7
00:00:19,427 --> 00:00:22,838
dunder get and dunder set methods and are

8
00:00:22,838 --> 00:00:25,375
writable. The distinction is important

9
00:00:25,375 --> 00:00:28,541
because of the precedence of attribute

10
00:00:28,541 --> 00:00:32,180
lookup. Behind the scenes the machinery in

11
00:00:32,180 --> 00:00:34,487
object. dunder getattribute, which is

12
00:00:34,487 --> 00:00:36,743
responsible for all attribute lookup in

13
00:00:36,743 --> 00:00:39,990
Python, transforms a call like this into a

14
00:00:39,990 --> 00:00:43,278
call like this. In fact, a precedence

15
00:00:43,278 --> 00:00:45,848
chain controls attribute lookup according

16
00:00:45,848 --> 00:00:49,027
to the following rules. If an instance is

17
00:00:49,027 --> 00:00:51,270
dunder dict has an entry with the same

18
00:00:51,270 --> 00:00:54,198
name as a data-descriptor the

19
00:00:54,198 --> 00:00:57,820
data-descriptor takes precedence. If an

20
00:00:57,820 --> 00:00:59,782
instance is dunder dict has an entry with

21
00:00:59,782 --> 00:01:02,919
the same name as a non-data descriptor the

22
00:01:02,919 --> 00:01:05,933
dictionary entry takes precedence. These

23
00:01:05,933 --> 00:01:09,202
statements are true, but quite a mouthful.

24
00:01:09,202 --> 00:01:11,853
Another way of looking at it is that

25
00:01:11,853 --> 00:01:13,995
attribute lookup precedes first the data

26
00:01:13,995 --> 00:01:16,448
descriptors, such as properties defined in

27
00:01:16,448 --> 00:01:19,213
the class, then to instance attributes in

28
00:01:19,213 --> 00:01:21,550
dunder dict, and then onto non-data

29
00:01:21,550 --> 00:01:24,960
descriptors in the class again. A simple

30
00:01:24,960 --> 00:01:27,395
experiment should make things clearer.

31
00:01:27,395 --> 00:01:30,969
Here we define a DataDescriptor, a

32
00:01:30,969 --> 00:01:34,339
NonDataDescriptor, and a class which uses

33
00:01:34,339 --> 00:01:37,794
them both called Owner. We'll import all

34
00:01:37,794 --> 00:01:41,283
this into a REPL session. After we've

35
00:01:41,283 --> 00:01:44,350
created an instance of Owner we'll

36
00:01:44,350 --> 00:01:48,428
retrieve the attribute A, set an item in

37
00:01:48,428 --> 00:01:51,483
the instance dictionary with the same

38
00:01:51,483 --> 00:01:55,434
name, and retrieve A again. Since this is

39
00:01:55,434 --> 00:01:58,954
a data descriptor the first rule applies,

40
00:01:58,954 --> 00:02:02,369
and the data descriptor takes precedence

41
00:02:02,369 --> 00:02:06,326
when we call obj. a. Now let's try

42
00:02:06,326 --> 00:02:09,290
attribute b. The first time we access obj.

43
00:02:09,290 --> 00:02:13,029
b there is no entry of the same name in

44
00:02:13,029 --> 00:02:15,454
the instance dictionary, so the

45
00:02:15,454 --> 00:02:17,781
NonDataDescriptor takes precedence. After

46
00:02:17,781 --> 00:02:21,229
we've added a b entry into dunder dict the

47
00:02:21,229 --> 00:02:25,378
second rule applies, and the dictionary

48
00:02:25,378 --> 00:02:31,000
entry takes precedence over the NonDataDescriptor.

