1
00:00:01,109 --> 00:00:03,534
We've seen that property is a descriptor,

2
00:00:03,534 --> 00:00:05,656
which wraps three functions. Let's create

3
00:00:05,656 --> 00:00:07,865
a more specialized descriptor useful for

4
00:00:07,865 --> 00:00:10,689
modeling the strictly positive numeric

5
00:00:10,689 --> 00:00:15,183
values in our planet class. Here's a

6
00:00:15,183 --> 00:00:17,665
simple descriptor called Positive. The

7
00:00:17,665 --> 00:00:19,906
descriptor class implements three methods,

8
00:00:19,906 --> 00:00:22,573
which comprise the descriptor protocol;

9
00:00:22,573 --> 00:00:27,198
dunder get, dunder set, and dunder delete,

10
00:00:27,198 --> 00:00:29,607
which are called when we get a value from

11
00:00:29,607 --> 00:00:31,977
a descriptor, set a value through a

12
00:00:31,977 --> 00:00:35,590
descriptor, or delete a value through a

13
00:00:35,590 --> 00:00:37,925
descriptor respectively. In addition, the

14
00:00:37,925 --> 00:00:40,530
positive class implements dunder init to

15
00:00:40,530 --> 00:00:42,610
configure new instances of the descriptor.

16
00:00:42,610 --> 00:00:45,536
Before we look in more detail at each of

17
00:00:45,536 --> 00:00:48,018
these methods let's make use of our new

18
00:00:48,018 --> 00:00:51,563
descriptor to refactor our Planet class.

19
00:00:51,563 --> 00:00:56,679
We remove the setters and getters for

20
00:00:56,679 --> 00:00:59,896
radius_metres and replace the call to the

21
00:00:59,896 --> 00:01:04,660
Property constructor with a call to the

22
00:01:04,660 --> 00:01:11,485
Positive constructor. We do the same for

23
00:01:11,485 --> 00:01:16,801
mass_kilograms, orbital_period_seconds,

24
00:01:16,801 --> 00:01:26,237
and surface_temperature_kelvin. With the

25
00:01:26,237 --> 00:01:28,498
positive descriptor on hand the Planet

26
00:01:28,498 --> 00:01:31,451
class shrinks by a huge amount. At first

27
00:01:31,451 --> 00:01:34,130
sight, this may appear confusing. It looks

28
00:01:34,130 --> 00:01:36,504
like we're assigning to radius_metres

29
00:01:36,504 --> 00:01:39,648
twice, once in the initializer, and once

30
00:01:39,648 --> 00:01:42,834
in the body of the class. In fact, the

31
00:01:42,834 --> 00:01:44,919
call in the body of the class is binding

32
00:01:44,919 --> 00:01:47,790
an instance of a positive descriptor to a

33
00:01:47,790 --> 00:01:51,372
class attribute of the Planet. The call in

34
00:01:51,372 --> 00:01:53,675
dunder init is then apparently assigning

35
00:01:53,675 --> 00:01:55,970
to an instance attribute, although, as

36
00:01:55,970 --> 00:01:59,017
we'll see in a moment, this assignment is

37
00:01:59,017 --> 00:02:03,125
actually invoking a method on the

38
00:02:03,125 --> 00:02:06,181
descriptor object. Allow us to explain the

39
00:02:06,181 --> 00:02:08,243
machinery we have created. Let's start

40
00:02:08,243 --> 00:02:10,740
with an instance of Planet. When we

41
00:02:10,740 --> 00:02:13,913
retrieve an attribute like this, with

42
00:02:13,913 --> 00:02:16,718
pluto. mass_kilograms, the Positive.

43
00:02:16,718 --> 00:02:20,364
dunder get function is called. The

44
00:02:20,364 --> 00:02:24,385
instance argument is set to Pluto, and the

45
00:02:24,385 --> 00:02:27,010
owner argument is set to the object which

46
00:02:27,010 --> 00:02:30,716
owns the descriptor. In this case, the

47
00:02:30,716 --> 00:02:34,119
class Planet. Similarly, our assignments

48
00:02:34,119 --> 00:02:37,296
to the descriptors in the Planet. dunder

49
00:02:37,296 --> 00:02:39,113
init function resolved to calls

50
00:02:39,113 --> 00:02:44,301
effectively equivalent to Positive. dunder

51
00:02:44,301 --> 00:02:47,635
set. Let's review graphically what we have

52
00:02:47,635 --> 00:02:51,348
here. We have a reference, Pluto, which is

53
00:02:51,348 --> 00:02:55,213
bound to an instance of Planet. The dunder

54
00:02:55,213 --> 00:02:58,750
class reference of the instance points to

55
00:02:58,750 --> 00:03:01,939
the Planet class object. The Planet class

56
00:03:01,939 --> 00:03:04,277
object contains four attributes, each of

57
00:03:04,277 --> 00:03:09,650
which references a distinct instance of

58
00:03:09,650 --> 00:03:14,663
the Positive descriptor object. The dunder

59
00:03:14,663 --> 00:03:17,738
class reference of each descriptor object

60
00:03:17,738 --> 00:03:21,041
refers to the Positive class. Notice that

61
00:03:21,041 --> 00:03:23,632
because the descriptor is owned by the

62
00:03:23,632 --> 00:03:26,273
Planet class rather than by the Pluto

63
00:03:26,273 --> 00:03:29,335
instance, we can't just store the value in

64
00:03:29,335 --> 00:03:32,748
the descriptor object. If we did that the

65
00:03:32,748 --> 00:03:35,920
value would be shared between all planet

66
00:03:35,920 --> 00:03:38,928
instances. Instead, we need to somehow

67
00:03:38,928 --> 00:03:41,995
associate the attribute value with the

68
00:03:41,995 --> 00:03:44,306
instance. At first, this seems easy. The

69
00:03:44,306 --> 00:03:46,754
dunder get call is handed a reference to

70
00:03:46,754 --> 00:03:49,534
the instance, Pluto in this case, so why

71
00:03:49,534 --> 00:03:52,941
not just store the value in Pluto's dunder

72
00:03:52,941 --> 00:03:56,332
dict? There's a problem though. Within the

73
00:03:56,332 --> 00:03:58,456
descriptor class, Positive, we have no way

74
00:03:58,456 --> 00:04:01,083
of knowing to which attribute name the

75
00:04:01,083 --> 00:04:04,086
descriptor is bound in the Planet class.

76
00:04:04,086 --> 00:04:06,178
We can distinguish between descriptor

77
00:04:06,178 --> 00:04:08,644
instances in dunder get using the

78
00:04:08,644 --> 00:04:10,886
self-argument, but in Python objects do

79
00:04:10,886 --> 00:04:13,798
not know which names have been bound to

80
00:04:13,798 --> 00:04:16,578
them. This means we have no way of

81
00:04:16,578 --> 00:04:18,438
correlating between descriptor instances

82
00:04:18,438 --> 00:04:22,516
and the descriptor names embedded in the

83
00:04:22,516 --> 00:04:26,088
Planet class. In other words, none of our

84
00:04:26,088 --> 00:04:28,095
descriptor objects know which quantity

85
00:04:28,095 --> 00:04:30,225
they represent. This, in turn, means we

86
00:04:30,225 --> 00:04:32,084
can't store the descriptor value in the

87
00:04:32,084 --> 00:04:35,225
dunder dict of Pluto because we wouldn't

88
00:04:35,225 --> 00:04:38,293
know what dictionary key to use. This

89
00:04:38,293 --> 00:04:40,169
apparent shortcoming of descriptors not

90
00:04:40,169 --> 00:04:42,795
knowing the name of the class attribute to

91
00:04:42,795 --> 00:04:44,797
which they are bound is also evident in

92
00:04:44,797 --> 00:04:47,174
the fact that our value validation error

93
00:04:47,174 --> 00:04:49,788
message in dunder set no longer mentions

94
00:04:49,788 --> 00:04:52,317
the attribute name, a clear regression in

95
00:04:52,317 --> 00:04:54,478
capabilities from what we had earlier.

96
00:04:54,478 --> 00:04:56,993
This is fixable, but the solution will

97
00:04:56,993 --> 00:05:00,461
have to wait until the next module in this

98
00:05:00,461 --> 00:05:03,598
course when we look at meta classes. So

99
00:05:03,598 --> 00:05:05,934
how to associate values with instances?

100
00:05:05,934 --> 00:05:09,173
Let's look at the solution pictorially

101
00:05:09,173 --> 00:05:12,688
first, then we'll reiterate with code. We

102
00:05:12,688 --> 00:05:14,623
use a special collection type from the

103
00:05:14,623 --> 00:05:16,268
Python standard library called

104
00:05:16,268 --> 00:05:18,999
WeakKeyDictionary. This works pretty much

105
00:05:18,999 --> 00:05:22,011
like a regular dictionary, except that it

106
00:05:22,011 --> 00:05:24,365
won't retain value objects, which are

107
00:05:24,365 --> 00:05:27,230
referred to only by the dictionary key

108
00:05:27,230 --> 00:05:29,631
references. We say the references are

109
00:05:29,631 --> 00:05:32,819
weak. A weak key dictionary owned by each

110
00:05:32,819 --> 00:05:35,365
descriptor instance is used to associate

111
00:05:35,365 --> 00:05:38,362
Planet instances with the values of the

112
00:05:38,362 --> 00:05:40,530
quantity represented by that descriptor,

113
00:05:40,530 --> 00:05:43,065
although the descriptor itself doesn't

114
00:05:43,065 --> 00:05:46,106
know which quantity is being represented.

115
00:05:46,106 --> 00:05:48,600
For example, the WeakKeyDictionary shown

116
00:05:48,600 --> 00:05:52,007
here associates Planet instances with

117
00:05:52,007 --> 00:05:55,828
mass_in_kilograms values. A separate

118
00:05:55,828 --> 00:05:58,315
WeakKeyDictionary associates Planet

119
00:05:58,315 --> 00:06:01,379
instances with radius_in_metres values.

120
00:06:01,379 --> 00:06:03,502
Because the dictionary keys are weak

121
00:06:03,502 --> 00:06:05,612
references, if our Planet instance is

122
00:06:05,612 --> 00:06:07,696
destroyed, let's pretend the earth is

123
00:06:07,696 --> 00:06:10,353
vaporized to make way for a hyperspace

124
00:06:10,353 --> 00:06:12,775
bypass, the corresponding entries in all

125
00:06:12,775 --> 00:06:18,402
the WeakKeyDictionaries are also removed.

126
00:06:18,402 --> 00:06:21,637
Now let's switch over to code to see how

127
00:06:21,637 --> 00:06:23,641
it's implemented in practice. A

128
00:06:23,641 --> 00:06:25,338
WeakKeyDictionary instance called

129
00:06:25,338 --> 00:06:28,166
_instance_data is created in the

130
00:06:28,166 --> 00:06:30,763
descriptor initializer, so as we've just

131
00:06:30,763 --> 00:06:33,184
seen, our Planet class indirectly

132
00:06:33,184 --> 00:06:37,327
aggregates four such dictionaries, one in

133
00:06:37,327 --> 00:06:41,421
each of the four descriptors. Within the

134
00:06:41,421 --> 00:06:43,346
dunder set method we associate the

135
00:06:43,346 --> 00:06:45,361
attribute value with the Planet instance

136
00:06:45,361 --> 00:06:47,918
by inserting a mapping from the instance

137
00:06:47,918 --> 00:06:51,714
as key to the attribute as value. As such,

138
00:06:51,714 --> 00:06:54,984
a single dictionary will contain all the

139
00:06:54,984 --> 00:06:58,950
radius_metres values for all planet

140
00:06:58,950 --> 00:07:01,689
instances. Another dictionary will contain

141
00:07:01,689 --> 00:07:04,585
all mass_kilograms values for all Planet

142
00:07:04,585 --> 00:07:07,827
instances, and so on. We're storing the

143
00:07:07,827 --> 00:07:09,339
instance attribute values completely

144
00:07:09,339 --> 00:07:11,681
outside the instances, but in such a way

145
00:07:11,681 --> 00:07:14,434
as we can reliably retrieve them in dunder

146
00:07:14,434 --> 00:07:17,838
get. Just to convince you that all of this

147
00:07:17,838 --> 00:07:20,952
works, we'll show it in action in the

148
00:07:20,952 --> 00:07:23,458
debugger. We'll stop the program in the

149
00:07:23,458 --> 00:07:25,927
initializer for Mars, and step into the

150
00:07:25,927 --> 00:07:31,026
descriptor dunder set function for

151
00:07:31,026 --> 00:07:34,920
technology radius_metres attribute. We can

152
00:07:34,920 --> 00:07:37,009
see that the _instance_data dictionary

153
00:07:37,009 --> 00:07:47,000
already contains the three radii for Mercury, Venus, and Earth.

