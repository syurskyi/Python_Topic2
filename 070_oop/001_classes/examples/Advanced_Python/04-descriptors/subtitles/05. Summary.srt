1
00:00:00,952 --> 00:00:03,660
Let's summarize. As we've seen, the

2
00:00:03,660 --> 00:00:06,208
descriptor protocol itself is very simple,

3
00:00:06,208 --> 00:00:09,176
which can lead to some very concise and

4
00:00:09,176 --> 00:00:11,629
declarative code, which hugely reduces

5
00:00:11,629 --> 00:00:14,480
duplication. At the same time,

6
00:00:14,480 --> 00:00:17,455
implementing descriptors correctly can be

7
00:00:17,455 --> 00:00:21,023
tricky, and requires careful testing. In

8
00:00:21,023 --> 00:00:24,579
this module we reviewed the built-in

9
00:00:24,579 --> 00:00:27,501
property decorator. We demonstrated how to

10
00:00:27,501 --> 00:00:29,672
create property descriptors without using

11
00:00:29,672 --> 00:00:32,002
decorator syntax by passing property

12
00:00:32,002 --> 00:00:34,843
getters and setters directly to the

13
00:00:34,843 --> 00:00:37,392
property constructor. These reinforce the

14
00:00:37,392 --> 00:00:40,189
notion that properties create objects

15
00:00:40,189 --> 00:00:43,990
called descriptors, which are bound to

16
00:00:43,990 --> 00:00:46,446
class attributes. We showed how to

17
00:00:46,446 --> 00:00:48,528
implement a simple descriptor to perform a

18
00:00:48,528 --> 00:00:50,400
basic attribute validation check by

19
00:00:50,400 --> 00:00:52,763
creating a class that implemented the

20
00:00:52,763 --> 00:00:55,709
descriptor protocol. We explained how

21
00:00:55,709 --> 00:00:58,704
descriptor instances have no knowledge of

22
00:00:58,704 --> 00:01:00,942
to which class attributes they are bound,

23
00:01:00,942 --> 00:01:03,459
so each descriptor instance must store the

24
00:01:03,459 --> 00:01:05,294
instance attributes for all descriptor

25
00:01:05,294 --> 00:01:08,072
owner instances. This can be achieved by

26
00:01:08,072 --> 00:01:11,698
using a WeakKeyDictionary from the Python

27
00:01:11,698 --> 00:01:15,466
standard library Weak Ref module. We

28
00:01:15,466 --> 00:01:17,278
looked at how to know when descriptors are

29
00:01:17,278 --> 00:01:19,449
retrieved from their owning classes rather

30
00:01:19,449 --> 00:01:22,927
than via instances by detecting when the

31
00:01:22,927 --> 00:01:26,288
instance argument to dunder get is set to

32
00:01:26,288 --> 00:01:29,721
none. A natural course of action in such

33
00:01:29,721 --> 00:01:32,735
cases is to return the descriptor instance

34
00:01:32,735 --> 00:01:34,706
itself. We explained the distinction

35
00:01:34,706 --> 00:01:37,281
between data and non-data descriptors, and

36
00:01:37,281 --> 00:01:41,178
how this relates to attribute lookup

37
00:01:41,178 --> 00:01:43,556
precedence. We're not quite done with the

38
00:01:43,556 --> 00:01:45,293
descriptors yet, and in particular, we'd

39
00:01:45,293 --> 00:01:47,371
like descriptor instances to know the name

40
00:01:47,371 --> 00:01:49,868
of the class attributes to which they have

41
00:01:49,868 --> 00:01:52,438
been bound, but to solve that problem we

42
00:01:52,438 --> 00:01:55,404
need sharper tools in the form of Python's

43
00:01:55,404 --> 00:01:57,774
meta classes, which we'll be covering

44
00:01:57,774 --> 00:02:06,000
next. Thanks for watching, and we'll see you in the next module.

