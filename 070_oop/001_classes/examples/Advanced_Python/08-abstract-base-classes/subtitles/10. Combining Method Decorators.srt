1
00:00:01,618 --> 00:00:04,660
What if you need to combine abstractmethod

2
00:00:04,660 --> 00:00:06,716
with other decorators? The abstractmethod

3
00:00:06,716 --> 00:00:09,352
decorator can be combined with the static

4
00:00:09,352 --> 00:00:11,460
method, class method, and property

5
00:00:11,460 --> 00:00:14,057
decorators, although care must be taken

6
00:00:14,057 --> 00:00:17,605
that the abstract method is the innermost

7
00:00:17,605 --> 00:00:20,546
decorator. For properties you can

8
00:00:20,546 --> 00:00:24,197
independently mark the getters and setters

9
00:00:24,197 --> 00:00:27,963
as abstract. Recall that properties are

10
00:00:27,963 --> 00:00:30,086
implemented using descriptors. When

11
00:00:30,086 --> 00:00:31,140
implementing your own descriptors you'll

12
00:00:31,140 --> 00:00:34,120
need to do a little extra work to ensure

13
00:00:34,120 --> 00:00:36,528
your descriptor plays nicely with

14
00:00:36,528 --> 00:00:39,476
abstractmethod. Let's look now at how to

15
00:00:39,476 --> 00:00:40,709
propagate abstractness through

16
00:00:40,709 --> 00:00:42,494
descriptors. Any descriptors which are

17
00:00:42,494 --> 00:00:44,554
implemented in terms of abstract methods

18
00:00:44,554 --> 00:00:47,559
should identify themselves as abstract by

19
00:00:47,559 --> 00:00:49,779
exposing a dunder isabstractmethod

20
00:00:49,779 --> 00:00:54,082
attribute, which should evaluate to true.

21
00:00:54,082 --> 00:00:56,740
Here in MyDataDescriptor, which inherits

22
00:00:56,740 --> 00:01:00,364
from the ABC base class, we've declared

23
00:01:00,364 --> 00:01:03,746
dunder get, dunder set, and dunder delete

24
00:01:03,746 --> 00:01:06,671
as abstract methods. The dunder

25
00:01:06,671 --> 00:01:09,937
isabstractmethod attribute can either be

26
00:01:09,937 --> 00:01:12,629
implemented as a class attribute of the

27
00:01:12,629 --> 00:01:14,882
descriptor class or can itself be

28
00:01:14,882 --> 00:01:17,530
implemented as a property, as we have done

29
00:01:17,530 --> 00:01:20,023
here. Implementing as a property is useful

30
00:01:20,023 --> 00:01:22,846
in cases where abstractness needs to be

31
00:01:22,846 --> 00:01:26,937
determined at runtime, as we'll see in an

32
00:01:26,937 --> 00:01:29,087
example shortly. First, though, let's see

33
00:01:29,087 --> 00:01:31,342
this in action with a very simple example.

34
00:01:31,342 --> 00:01:34,781
We will define a class called

35
00:01:34,781 --> 00:01:37,074
AbstractBaseClass, which inherits from

36
00:01:37,074 --> 00:01:40,644
ABC. Within this class we'll define two

37
00:01:40,644 --> 00:01:43,060
properties called abstract_property and

38
00:01:43,060 --> 00:01:46,729
concrete_property using the appropriate

39
00:01:46,729 --> 00:01:50,272
combinations of decorators. By querying

40
00:01:50,272 --> 00:01:52,643
the descriptor objects created by the

41
00:01:52,643 --> 00:01:55,167
property decorators we can inspect the

42
00:01:55,167 --> 00:01:57,335
dunder isabstractmethod attribute of the

43
00:01:57,335 --> 00:02:00,107
two properties and see that they have been

44
00:02:00,107 --> 00:02:02,746
marked as abstract and none abstract or

45
00:02:02,746 --> 00:02:05,167
concrete, as necessary. This happens

46
00:02:05,167 --> 00:02:08,219
because the dunder isabstract method flag

47
00:02:08,219 --> 00:02:11,416
is inspected by the ABCMeta implementation

48
00:02:11,416 --> 00:02:13,974
when the metaclass creates the actual

49
00:02:13,974 --> 00:02:16,405
class object, which hosts the property

50
00:02:16,405 --> 00:02:24,000
descriptor. So much for the theory, let's see this in practice.

