1
00:00:01,346 --> 00:00:03,555
Abstract base classes in Python serve two

2
00:00:03,555 --> 00:00:05,961
purposes. First of all, they provide a

3
00:00:05,961 --> 00:00:07,788
mechanism for defining protocols or

4
00:00:07,788 --> 00:00:09,778
interfaces, and ensuring the implementers

5
00:00:09,778 --> 00:00:13,379
of those protocols meets some minimum

6
00:00:13,379 --> 00:00:15,489
requirements. Secondly, they provide a

7
00:00:15,489 --> 00:00:17,602
means for easily determining whether an

8
00:00:17,602 --> 00:00:20,460
arbitrary class or instance meets the

9
00:00:20,460 --> 00:00:23,377
requirements of a specific protocol. For

10
00:00:23,377 --> 00:00:25,517
instance, after importing MutableSequence

11
00:00:25,517 --> 00:00:28,958
from the collections. abc module. We can

12
00:00:28,958 --> 00:00:31,260
determine that list is a MutableSequence

13
00:00:31,260 --> 00:00:33,278
using the built-in, issubclass function.

14
00:00:33,278 --> 00:00:36,745
This much may not be surprising, but let's

15
00:00:36,745 --> 00:00:39,916
look at the base class of list. In fact,

16
00:00:39,916 --> 00:00:42,361
we'll look at the transitive base classes

17
00:00:42,361 --> 00:00:44,926
of list by examining its method resolution

18
00:00:44,926 --> 00:00:47,909
order using the dunder mro attribute. This

19
00:00:47,909 --> 00:00:51,562
reveals that list has only one base class,

20
00:00:51,562 --> 00:00:54,077
object, and that MutableSequence is

21
00:00:54,077 --> 00:00:57,096
nowhere to be seen. Further reflection, if

22
00:00:57,096 --> 00:00:59,779
you'll excuse the pun, might lead you to

23
00:00:59,779 --> 00:01:01,947
wonder how it is that such a fundamental

24
00:01:01,947 --> 00:01:04,632
type as Python's list can be a subclass of

25
00:01:04,632 --> 00:01:07,888
a type defined in a library module. We've

26
00:01:07,888 --> 00:01:09,814
started out with this curious example, so

27
00:01:09,814 --> 00:01:11,937
as to efficiently disabuse migrants from

28
00:01:11,937 --> 00:01:14,100
other programming languages of any

29
00:01:14,100 --> 00:01:16,260
existing notions of what abstract base

30
00:01:16,260 --> 00:01:19,024
classes are, how they work, how they are

31
00:01:19,024 --> 00:01:22,759
used, and why they are useful. That done,

32
00:01:22,759 --> 00:01:25,560
we'll dig further into the mechanism.

33
00:01:25,560 --> 00:01:27,772
Let's establish that MutableSequence is

34
00:01:27,772 --> 00:01:30,438
indeed abstract by attempting to directly

35
00:01:30,438 --> 00:01:33,574
instantiate it. This fails with a useful

36
00:01:33,574 --> 00:01:37,012
type error explaining the five methods we

37
00:01:37,012 --> 00:01:39,555
need to implement the MutableSequence

38
00:01:39,555 --> 00:01:41,699
protocol. The reason we don't need to

39
00:01:41,699 --> 00:01:44,426
implement all 16 is that 11 of them can be

40
00:01:44,426 --> 00:01:47,358
implemented in terms of the other 5, and

41
00:01:47,358 --> 00:01:49,370
the MutableSequence abstract base class

42
00:01:49,370 --> 00:01:52,442
contains code to do exactly this. Note,

43
00:01:52,442 --> 00:01:54,125
however, that these implementations may

44
00:01:54,125 --> 00:01:56,448
not be the most efficient. Since they

45
00:01:56,448 --> 00:01:58,366
can't exploit knowledge of the concrete

46
00:01:58,366 --> 00:02:01,619
class, they must work entirely through the

47
00:02:01,619 --> 00:02:05,261
interface of the abstract class. Now to

48
00:02:05,261 --> 00:02:08,256
the question of how issubclass(list,

49
00:02:08,256 --> 00:02:10,539
MutableSequence) returns true. What

50
00:02:10,539 --> 00:02:13,455
happens is that when we call

51
00:02:13,455 --> 00:02:14,876
issubclass(list, MutableSequence) the

52
00:02:14,876 --> 00:02:17,123
built-in issubclass function checks for

53
00:02:17,123 --> 00:02:20,391
the existence of a method called dunder

54
00:02:20,391 --> 00:02:22,943
subclasscheck on the type of

55
00:02:22,943 --> 00:02:25,540
MutableSequence, which is to say, on the

56
00:02:25,540 --> 00:02:27,627
metaclass of MutableSequence, and if this

57
00:02:27,627 --> 00:02:31,070
method is present it is called with the

58
00:02:31,070 --> 00:02:33,222
subclass list as an argument.

59
00:02:33,222 --> 00:02:35,043
Issubclass(list, MutableSequence) is

60
00:02:35,043 --> 00:02:39,102
roughly equivalent to this code. It is up

61
00:02:39,102 --> 00:02:41,150
to the metaclass of MutableSequence to

62
00:02:41,150 --> 00:02:44,017
determine whether or not list is a

63
00:02:44,017 --> 00:02:46,319
subclass of MutableSequence, rather than

64
00:02:46,319 --> 00:02:48,945
list being required to know that

65
00:02:48,945 --> 00:02:51,503
MutableSequence is one of its base

66
00:02:51,503 --> 00:02:54,240
classes. This, in effect, allows list to

67
00:02:54,240 --> 00:02:56,551
be a subclass of MutableSequence without

68
00:02:56,551 --> 00:02:58,870
MutableSequence being a superclass of list

69
00:02:58,870 --> 00:03:03,002
in the normal sense of being the target of

70
00:03:03,002 --> 00:03:05,344
an inheritance relationship. We describe

71
00:03:05,344 --> 00:03:08,111
such base classes as virtual base classes,

72
00:03:08,111 --> 00:03:11,352
which has nothing at all to do with an

73
00:03:11,352 --> 00:03:13,514
identically named concept in C++. The

74
00:03:13,514 --> 00:03:15,680
dunder subclass check method on the

75
00:03:15,680 --> 00:03:18,570
metaclass of the virtual base class can do

76
00:03:18,570 --> 00:03:21,103
pretty much anything it likes to determine

77
00:03:21,103 --> 00:03:27,000
whether it's argument is to be considered a subclass.

