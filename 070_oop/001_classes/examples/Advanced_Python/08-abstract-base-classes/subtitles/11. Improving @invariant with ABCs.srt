1
00:00:01,705 --> 00:00:04,108
We rounded off the previous module of this

2
00:00:04,108 --> 00:00:06,434
course on class decorators by building a

3
00:00:06,434 --> 00:00:08,308
class decorator for checking class

4
00:00:08,308 --> 00:00:10,909
invariants after every method call and

5
00:00:10,909 --> 00:00:14,149
property access. This worked fine for both

6
00:00:14,149 --> 00:00:16,618
methods and properties with a single

7
00:00:16,618 --> 00:00:19,103
application of the decorator, but with

8
00:00:19,103 --> 00:00:21,201
chained invariant decorators the checking

9
00:00:21,201 --> 00:00:24,836
didn't work as planned for properties,

10
00:00:24,836 --> 00:00:29,589
with only the innermost invariant taking

11
00:00:29,589 --> 00:00:32,563
effect. Let's recap. Although the

12
00:00:32,563 --> 00:00:36,381
innermost lower bound check works when we

13
00:00:36,381 --> 00:00:39,493
try to assign a temperature of -300

14
00:00:39,493 --> 00:00:41,675
Celsius through the Celsius setter,

15
00:00:41,675 --> 00:00:44,102
violating the upper bound with a

16
00:00:44,102 --> 00:00:47,790
temperature of 1*10 to the 34 Celsius is

17
00:00:47,790 --> 00:00:52,840
not detected as we had hoped. The problem

18
00:00:52,840 --> 00:00:57,203
here is that our class decorator is

19
00:00:57,203 --> 00:00:59,654
detecting specifically property instances

20
00:00:59,654 --> 00:01:02,885
with this fragment where we inspect each

21
00:01:02,885 --> 00:01:05,815
attribute of the class being decorated and

22
00:01:05,815 --> 00:01:09,476
check whether it is an instance of

23
00:01:09,476 --> 00:01:13,048
property. Because our property wrappers of

24
00:01:13,048 --> 00:01:14,577
type InvariantCheckingPropertyProxy are

25
00:01:14,577 --> 00:01:16,433
not detected as instances of property,

26
00:01:16,433 --> 00:01:19,607
they are not wrapped a second time, and

27
00:01:19,607 --> 00:01:22,860
the invariant specified in the outermost

28
00:01:22,860 --> 00:01:26,010
decorator is not enforced. We promised to

29
00:01:26,010 --> 00:01:28,300
use abstract base classes to fix this

30
00:01:28,300 --> 00:01:32,616
problem, so let's go. We'll introduce a

31
00:01:32,616 --> 00:01:35,941
new abstract base class called

32
00:01:35,941 --> 00:01:37,950
PropertyDataDescriptor, which inherits

33
00:01:37,950 --> 00:01:41,746
from the ABC convenience class, and which

34
00:01:41,746 --> 00:01:43,608
contains three abstract methods, which

35
00:01:43,608 --> 00:01:46,712
define the data descriptor protocol,

36
00:01:46,712 --> 00:01:52,217
dunder get, dunder set, and dunder delete.

37
00:01:52,217 --> 00:01:54,838
PropertyDataDescriptor also includes the

38
00:01:54,838 --> 00:01:57,788
abstract property, dunder isabstractmethod

39
00:01:57,788 --> 00:02:01,889
for correct propagation of abstractness.

40
00:02:01,889 --> 00:02:03,431
Note that because dunder isabstractmethod

41
00:02:03,431 --> 00:02:05,867
needs to look like an abstract attribute

42
00:02:05,867 --> 00:02:08,998
we have implemented it by applying the

43
00:02:08,998 --> 00:02:13,501
abstract method and property decorators in

44
00:02:13,501 --> 00:02:17,134
that order. Having defined an abstract

45
00:02:17,134 --> 00:02:20,651
base class, we now need some subclasses.

46
00:02:20,651 --> 00:02:23,564
The first will be a virtual subclass, the

47
00:02:23,564 --> 00:02:25,314
built-in property class, which will

48
00:02:25,314 --> 00:02:27,617
register with the base class by calling

49
00:02:27,617 --> 00:02:30,135
PropertyDataDescriptor.

50
00:02:30,135 --> 00:02:33,965
register(property). The second subclass

51
00:02:33,965 --> 00:02:37,644
will be a real subclass. We'll modify our

52
00:02:37,644 --> 00:02:39,137
existing property proxy,

53
00:02:39,137 --> 00:02:41,833
InvariantCheckingPropertyProxy, to inherit

54
00:02:41,833 --> 00:02:44,234
from PropertyDataDescriptor, which will

55
00:02:44,234 --> 00:02:47,852
also require that we override the dunder

56
00:02:47,852 --> 00:02:50,313
isabstractmethod property. In the

57
00:02:50,313 --> 00:02:52,549
implementation of dunder isabstractmethod

58
00:02:52,549 --> 00:02:55,673
we delegate the attribute of the same name

59
00:02:55,673 --> 00:03:00,562
on the referent property, which we are

60
00:03:00,562 --> 00:03:03,238
wrapping. Finally, we need to update the

61
00:03:03,238 --> 00:03:05,091
search and wrap logic in invariant

62
00:03:05,091 --> 00:03:08,063
checking class decorator to use the more

63
00:03:08,063 --> 00:03:10,185
general test for instances of

64
00:03:10,185 --> 00:03:13,809
PropertyDataDescriptor, rather than the

65
00:03:13,809 --> 00:03:19,708
more specific test for just property. With

66
00:03:19,708 --> 00:03:22,494
these changes in place, both invariants

67
00:03:22,494 --> 00:03:25,171
are enforced on property writes. We'll

68
00:03:25,171 --> 00:03:27,666
create a temperature of 42 Kelvin, then

69
00:03:27,666 --> 00:03:30,010
attempt to modify the temperature through

70
00:03:30,010 --> 00:03:33,227
the Celsius setter with a temperature of

71
00:03:33,227 --> 00:03:35,817
-300 Celsius, which is below absolute

72
00:03:35,817 --> 00:03:38,374
zero. This now fails as designed,

73
00:03:38,374 --> 00:03:41,796
signaling a violation of the temperature

74
00:03:41,796 --> 00:03:45,491
not below absolute zero invariant. Then we

75
00:03:45,491 --> 00:03:48,446
test the other invariant by assigning a

76
00:03:48,446 --> 00:03:51,760
temperature of 1*10 to the 34 through the

77
00:03:51,760 --> 00:03:54,198
Celsius setter. This also fails as

78
00:03:54,198 --> 00:03:59,034
designed, signaling a violation of the

79
00:03:59,034 --> 00:04:03,463
temperature below absolute hot classing

80
00:04:03,463 --> 00:04:06,653
variant. There's a lot going on in this

81
00:04:06,653 --> 00:04:07,970
code with decorators, metaclasses,

82
00:04:07,970 --> 00:04:10,920
abstract base classes, and descriptors,

83
00:04:10,920 --> 00:04:14,788
and it may seem somewhat complicated. All

84
00:04:14,788 --> 00:04:16,759
this complexity is well encapsulated in

85
00:04:16,759 --> 00:04:19,264
the invariant class decorator, so take a

86
00:04:19,264 --> 00:04:29,000
step back, and enjoy the simplicity of the client code in the temperature class.

