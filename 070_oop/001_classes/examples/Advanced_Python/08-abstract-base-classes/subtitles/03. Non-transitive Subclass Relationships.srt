1
00:00:01,548 --> 00:00:03,522
Overriding subclasscheck affords class

2
00:00:03,522 --> 00:00:06,484
implementors a great deal of flexibility,

3
00:00:06,484 --> 00:00:08,471
so much flexibility, in fact, that not

4
00:00:08,471 --> 00:00:10,447
only should you not expect symmetry

5
00:00:10,447 --> 00:00:13,224
between the superclass and subclass

6
00:00:13,224 --> 00:00:15,344
relationships, you shouldn't expect

7
00:00:15,344 --> 00:00:17,950
transitivity of the subclass relationship.

8
00:00:17,950 --> 00:00:21,267
What this means is that if C is a subclass

9
00:00:21,267 --> 00:00:26,104
of B, and B is a subclass of A it doesn't

10
00:00:26,104 --> 00:00:31,133
necessarily follow that C is a subclass of

11
00:00:31,133 --> 00:00:33,475
A. One glaring example from Python

12
00:00:33,475 --> 00:00:35,843
revolves around the Hashable virtual base

13
00:00:35,843 --> 00:00:39,774
class from collections. abc. Let's import

14
00:00:39,774 --> 00:00:43,665
Hashable from collections. abc, and test

15
00:00:43,665 --> 00:00:48,235
whether object is hashable. Yes it is. Now

16
00:00:48,235 --> 00:00:52,171
let's test whether list is an object. Yes,

17
00:00:52,171 --> 00:00:55,802
of course it is. Now let's test whether

18
00:00:55,802 --> 00:00:59,619
the list is Hashable. No it is not, so

19
00:00:59,619 --> 00:01:02,823
even though list is an object, an object

20
00:01:02,823 --> 00:01:07,353
is a Hashable, we cannot say that list is

21
00:01:07,353 --> 00:01:10,094
a Hashable. This occurs because list,

22
00:01:10,094 --> 00:01:12,607
which remember is a mutable collection,

23
00:01:12,607 --> 00:01:15,437
disables hashing by removing the special

24
00:01:15,437 --> 00:01:18,091
dunder hash method, which would otherwise

25
00:01:18,091 --> 00:01:20,983
be inherited from object, and which the

26
00:01:20,983 --> 00:01:24,089
Hashable abstract base class checks for

27
00:01:24,089 --> 00:01:26,782
through its dunder subclass check

28
00:01:26,782 --> 00:01:28,465
implementation. Some further investigation

29
00:01:28,465 --> 00:01:31,133
reveals that the list class sets the

30
00:01:31,133 --> 00:01:34,527
dunder hash attribute to None. The

31
00:01:34,527 --> 00:01:36,335
Hashable dunder subclasscheck

32
00:01:36,335 --> 00:01:39,333
implementation checks for this eventuality

33
00:01:39,333 --> 00:01:43,530
and uses it to signal None hashability.

34
00:01:43,530 --> 00:01:45,608
This example is also interesting because

35
00:01:45,608 --> 00:01:48,080
it demonstrates the fact that even the

36
00:01:48,080 --> 00:01:50,302
ultimate base class object can be

37
00:01:50,302 --> 00:01:52,197
considered a subclass of Hashable,

38
00:01:52,197 --> 00:01:54,679
underlining the lack of symmetry between

39
00:01:54,679 --> 00:02:02,000
superclass and subclass relationships in Python.

