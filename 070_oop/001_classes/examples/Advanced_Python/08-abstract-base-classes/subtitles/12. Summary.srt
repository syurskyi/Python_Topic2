1
00:00:01,510 --> 00:00:03,492
In this module we've explained Python

2
00:00:03,492 --> 00:00:05,922
system of abstract base classes, which is

3
00:00:05,922 --> 00:00:07,867
somewhat more flexible than similar

4
00:00:07,867 --> 00:00:09,857
concepts in other languages. In

5
00:00:09,857 --> 00:00:12,896
particular, we covered how the behavior of

6
00:00:12,896 --> 00:00:15,022
the built-in issubclass and isinstance

7
00:00:15,022 --> 00:00:17,908
functions can be specialized for a base

8
00:00:17,908 --> 00:00:20,628
class by defining the dunder subclasscheck

9
00:00:20,628 --> 00:00:23,405
and dunder instancecheck methods on the

10
00:00:23,405 --> 00:00:25,840
metaclass of that base class. Specialized

11
00:00:25,840 --> 00:00:28,217
subclass checks allow us to centralize the

12
00:00:28,217 --> 00:00:30,535
definition of what it means to be a

13
00:00:30,535 --> 00:00:33,636
subclass by gathering look before you leap

14
00:00:33,636 --> 00:00:36,787
protocol checks into one place. Any class

15
00:00:36,787 --> 00:00:38,361
which implements the required protocol

16
00:00:38,361 --> 00:00:42,270
will become at least a virtual subclass of

17
00:00:42,270 --> 00:00:46,038
a virtual base class. The standard library

18
00:00:46,038 --> 00:00:48,646
ABC module contains tools for assisting in

19
00:00:48,646 --> 00:00:51,987
the definition of abstract base classes.

20
00:00:51,987 --> 00:00:55,564
Most important amongst these tools is the

21
00:00:55,564 --> 00:00:58,769
ABC metamethod class, which can be used as

22
00:00:58,769 --> 00:01:01,483
the metaclass for abstract base classes.

23
00:01:01,483 --> 00:01:04,352
Slightly more conveniently, you can simply

24
00:01:04,352 --> 00:01:09,371
inherit from the ABC class, which has

25
00:01:09,371 --> 00:01:13,659
ABCMeta as its metaclass. ABCMeta provides

26
00:01:13,659 --> 00:01:17,210
default implementations of both dunder

27
00:01:17,210 --> 00:01:18,997
subclasscheck and dunder instancecheck,

28
00:01:18,997 --> 00:01:21,150
which support two means of identifying

29
00:01:21,150 --> 00:01:23,723
subclasses, a special dunder subclasshook

30
00:01:23,723 --> 00:01:27,998
class method on abstract base classes or a

31
00:01:27,998 --> 00:01:30,215
registration method. Dunder subclasshook

32
00:01:30,215 --> 00:01:33,325
accepts a candidate subclass as it's only

33
00:01:33,325 --> 00:01:36,079
argument, and should return true or not

34
00:01:36,079 --> 00:01:38,193
implemented. False should only be returned

35
00:01:38,193 --> 00:01:42,495
if it is designed to disable subclass

36
00:01:42,495 --> 00:01:45,881
registration. Passing any class, even a

37
00:01:45,881 --> 00:01:48,421
built-in class to the register metamethod

38
00:01:48,421 --> 00:01:50,867
of an abstract base class will register

39
00:01:50,867 --> 00:01:54,300
the argument as a virtual subclass of the

40
00:01:54,300 --> 00:01:57,213
base class. An abstractmethod decorator

41
00:01:57,213 --> 00:02:00,597
can be used to prevent instantiation of

42
00:02:00,597 --> 00:02:03,052
abstract classes, and require methods to

43
00:02:03,052 --> 00:02:06,909
be marked as such to be overridden in

44
00:02:06,909 --> 00:02:09,320
real, although not virtual, subclasses.

45
00:02:09,320 --> 00:02:11,584
The abstractmethod decorator can be

46
00:02:11,584 --> 00:02:14,604
combined with other decorators, such as

47
00:02:14,604 --> 00:02:17,023
staticmethod, classmethod, and property,

48
00:02:17,023 --> 00:02:20,820
but abstractmethod should always be the

49
00:02:20,820 --> 00:02:23,092
innermost decorator. Descriptors should

50
00:02:23,092 --> 00:02:25,049
propagate abstractness from underlying

51
00:02:25,049 --> 00:02:29,518
methods by exposing the dunder

52
00:02:29,518 --> 00:02:33,018
isabstractmethod attribute. Python is a

53
00:02:33,018 --> 00:02:35,365
large and complicated language with many

54
00:02:35,365 --> 00:02:37,472
moving parts. We find it remarkable that

55
00:02:37,472 --> 00:02:39,590
much of this complexity is so well hidden

56
00:02:39,590 --> 00:02:42,426
for the vast majority of the time in

57
00:02:42,426 --> 00:02:44,525
Python. We hope in this course we've given

58
00:02:44,525 --> 00:02:46,150
you deeper insight into some important

59
00:02:46,150 --> 00:02:48,802
mechanisms in Python which, while a bit

60
00:02:48,802 --> 00:02:51,957
trickier to understand, can deliver great

61
00:02:51,957 --> 00:02:54,197
expressive power. You've now reached the

62
00:02:54,197 --> 00:02:56,271
end of this course in Advanced Python, and

63
00:02:56,271 --> 00:02:58,282
now is the time to take what you've

64
00:02:58,282 --> 00:02:59,773
learned and apply these powerful

65
00:02:59,773 --> 00:03:03,172
techniques in your work and play with

66
00:03:03,172 --> 00:03:04,897
Python. If you'd like written material to

67
00:03:04,897 --> 00:03:06,793
go along with this course you should check

68
00:03:06,793 --> 00:03:09,974
out our Python Craftsman book series. The

69
00:03:09,974 --> 00:03:12,347
books correspond to our Pluralsight

70
00:03:12,347 --> 00:03:15,194
courses, which cover the core Python

71
00:03:15,194 --> 00:03:17,869
language. The first book in the Craftsman

72
00:03:17,869 --> 00:03:20,022
series, The Python Apprentice, corresponds

73
00:03:20,022 --> 00:03:23,459
to our Python Fundamentals Pluralsight

74
00:03:23,459 --> 00:03:25,816
course. The second book, The Python

75
00:03:25,816 --> 00:03:27,486
Journeyman, corresponds to our Python

76
00:03:27,486 --> 00:03:30,321
Beyond the Basics Pluralsight course. The

77
00:03:30,321 --> 00:03:33,702
trilogy is completed by the The Python

78
00:03:33,702 --> 00:03:36,758
Master, which corresponds to this Advanced

79
00:03:36,758 --> 00:03:38,773
Python course. Pluralsight viewers can

80
00:03:38,773 --> 00:03:41,430
follow the URLs shown below each book to

81
00:03:41,430 --> 00:03:45,024
get them at a deep discount. If you'd like

82
00:03:45,024 --> 00:03:47,993
to dig further into some advanced uses of

83
00:03:47,993 --> 00:03:50,477
Python you might care to swing by our

84
00:03:50,477 --> 00:03:52,985
Sixty North Blog, Good with Computers,

85
00:03:52,985 --> 00:03:56,288
where we cover some very advanced topics,

86
00:03:56,288 --> 00:03:58,824
such as integrating Python with C++ code

87
00:03:58,824 --> 00:04:00,599
and implementing a sophisticated

88
00:04:00,599 --> 00:04:03,353
functional programming technique called

89
00:04:03,353 --> 00:04:06,311
transducers in Python. We'll doubtless be

90
00:04:06,311 --> 00:04:08,096
back with more content for the

91
00:04:08,096 --> 00:04:09,798
ever-growing Python language and library.

92
00:04:09,798 --> 00:04:12,011
Please remember, though, that the most

93
00:04:12,011 --> 00:04:14,258
important characteristic of Python is

94
00:04:14,258 --> 00:04:20,056
that, above all else, it's great fun to

95
00:04:20,056 --> 00:04:23,000
write Python software, so enjoy yourselves.

