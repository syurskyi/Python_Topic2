1
00:00:00,000 --> 00:00:04,388
Hello. My name is Robert Smallshire. In

2
00:00:04,388 --> 00:00:06,325
this course module we'll be investigating

3
00:00:06,325 --> 00:00:08,848
the abstract base class mechanism in

4
00:00:08,848 --> 00:00:13,159
Python as originally defined in PEP 3119.

5
00:00:13,159 --> 00:00:15,703
We previously used some abstract base

6
00:00:15,703 --> 00:00:18,207
classes, such as Sequence from the

7
00:00:18,207 --> 00:00:20,511
collections. abc module in our Python

8
00:00:20,511 --> 00:00:23,062
Beyond the Basics course when implementing

9
00:00:23,062 --> 00:00:26,794
a sorted set collection type. This time

10
00:00:26,794 --> 00:00:29,106
we'll look at the tools provided in the

11
00:00:29,106 --> 00:00:32,053
Python standard library ABC module for

12
00:00:32,053 --> 00:00:36,200
creating abstract base classes of your own

13
00:00:36,200 --> 00:00:38,654
design. If you're coming to Python from

14
00:00:38,654 --> 00:00:40,669
another object oriented language, such as

15
00:00:40,669 --> 00:00:43,765
Java, C++, or C# you may have preconceived

16
00:00:43,765 --> 00:00:46,731
ideas of what an abstract base class is

17
00:00:46,731 --> 00:00:49,657
and how to use one. Beware though, the

18
00:00:49,657 --> 00:00:52,347
abstract base class mechanism in Python is

19
00:00:52,347 --> 00:00:55,121
much more flexible and can work in what

20
00:00:55,121 --> 00:00:59,218
may seem to be very surprising ways, so

21
00:00:59,218 --> 00:01:02,413
pay attention. Thinking for a moment

22
00:01:02,413 --> 00:01:04,840
beyond the confines of Python, what is, in

23
00:01:04,840 --> 00:01:07,795
general, an abstract base class? The clue

24
00:01:07,795 --> 00:01:10,715
is in the name. Base refers to the fact

25
00:01:10,715 --> 00:01:12,686
that the class is intended to be the

26
00:01:12,686 --> 00:01:14,668
target of an inheritance relationship.

27
00:01:14,668 --> 00:01:18,634
That is, we expect another class to derive

28
00:01:18,634 --> 00:01:21,590
from the base class. For instance,

29
00:01:21,590 --> 00:01:23,958
GraphicalDevice here is intended as the

30
00:01:23,958 --> 00:01:26,334
base class for other classes, such as our

31
00:01:26,334 --> 00:01:28,371
EpsonWF3520PrinterDriver. Abstract refers

32
00:01:28,371 --> 00:01:33,308
to the fact that the class cannot be

33
00:01:33,308 --> 00:01:35,899
instantiated in isolation. That is, it

34
00:01:35,899 --> 00:01:39,463
makes no sense to create an object of the

35
00:01:39,463 --> 00:01:42,374
type of the base class alone. It only

36
00:01:42,374 --> 00:01:44,850
makes sense to instantiate the class as

37
00:01:44,850 --> 00:01:47,681
part of an object of a derived type.

38
00:01:47,681 --> 00:01:50,665
Ideally, it should not be possible to

39
00:01:50,665 --> 00:01:52,797
instantiate an abstract base class

40
00:01:52,797 --> 00:01:54,927
directly. The opposite of abstract is

41
00:01:54,927 --> 00:01:56,971
concrete, and in this example the

42
00:01:56,971 --> 00:02:00,302
PrinterDriver is a concrete class, so it

43
00:02:00,302 --> 00:02:03,004
makes sense to instantiate it. The

44
00:02:03,004 --> 00:02:05,583
rational for any abstract base class is to

45
00:02:05,583 --> 00:02:07,919
define an interface which derived classes

46
00:02:07,919 --> 00:02:11,115
must implement. This allows client code to

47
00:02:11,115 --> 00:02:13,820
be written against the base class

48
00:02:13,820 --> 00:02:16,068
interface. In this example the

49
00:02:16,068 --> 00:02:19,058
PrinterDriver must override the three

50
00:02:19,058 --> 00:02:21,792
abstract methods of GraphicalDevice. Done

51
00:02:21,792 --> 00:02:23,841
diligently, this leads to a highly

52
00:02:23,841 --> 00:02:25,806
desirable property of class hierarchies

53
00:02:25,806 --> 00:02:28,801
called Liskov Substitutability, a design

54
00:02:28,801 --> 00:02:31,025
principle which states that subclasses,

55
00:02:31,025 --> 00:02:34,105
from the point of view of the client code,

56
00:02:34,105 --> 00:02:36,141
should be interchangeable. In other words,

57
00:02:36,141 --> 00:02:38,502
client code developed against an abstract

58
00:02:38,502 --> 00:02:41,187
interface should not require knowledge of

59
00:02:41,187 --> 00:02:43,773
specific concrete types, only of the

60
00:02:43,773 --> 00:02:46,340
capabilities as promised by the abstract

61
00:02:46,340 --> 00:02:49,101
base class. For example, code written

62
00:02:49,101 --> 00:02:51,484
against the interface of GraphicalDevice

63
00:02:51,484 --> 00:02:55,323
should be able to render to an

64
00:02:55,323 --> 00:02:58,137
EpsonWF3520Printer or a 1080p LcdDisplay

65
00:02:58,137 --> 00:03:01,235
without modification. We can substitute

66
00:03:01,235 --> 00:03:04,662
one concrete class for another. Abstract

67
00:03:04,662 --> 00:03:06,633
base classes differ from pure interfaces,

68
00:03:06,633 --> 00:03:09,520
such as those we have in languages like

69
00:03:09,520 --> 00:03:12,271
Java, insofar as they can also contain

70
00:03:12,271 --> 00:03:15,736
implementation code, which is to be shared

71
00:03:15,736 --> 00:03:19,358
by all derived classes. Why do we need to

72
00:03:19,358 --> 00:03:21,656
define named interfaces when we have duck

73
00:03:21,656 --> 00:03:23,384
typing? Isn't it sufficient to know

74
00:03:23,384 --> 00:03:25,064
whether a particular object responds to

75
00:03:25,064 --> 00:03:27,571
the interface of a duck, and behaves like

76
00:03:27,571 --> 00:03:30,305
a duck without actually knowing that it is

77
00:03:30,305 --> 00:03:33,636
a duck? In Python this is true both in

78
00:03:33,636 --> 00:03:35,530
theory and practice, but determining

79
00:03:35,530 --> 00:03:37,838
whether a particular object supports the

80
00:03:37,838 --> 00:03:40,552
required interface in advance of

81
00:03:40,552 --> 00:03:43,809
exercising that interface can be quite

82
00:03:43,809 --> 00:03:47,251
awkward. For example, what does it mean in

83
00:03:47,251 --> 00:03:49,919
Python to be a MutableSequence? We know

84
00:03:49,919 --> 00:03:52,013
that list is a MutableSequence, but we

85
00:03:52,013 --> 00:03:54,424
can't assume that all mutable sequences

86
00:03:54,424 --> 00:03:58,067
are lists. In fact, the MutableSequence

87
00:03:58,067 --> 00:04:01,826
protocol requires at least 16 methods are

88
00:04:01,826 --> 00:04:03,529
implemented. When relying on duck typing

89
00:04:03,529 --> 00:04:05,649
it can be difficult to be sure that you've

90
00:04:05,649 --> 00:04:08,112
met the requirements, and if clients do

91
00:04:08,112 --> 00:04:10,284
need to determine whether a particular

92
00:04:10,284 --> 00:04:13,165
object is admissible as a mutable sequence

93
00:04:13,165 --> 00:04:19,400
with a look before you leap approach the

94
00:04:19,400 --> 00:04:21,000
check is messy and awkward to perform robustly.

