1
00:00:00,000 --> 00:00:02,633
Hello. My name is Robert Smallshire.

2
00:00:02,633 --> 00:00:05,786
Welcome to the sixth module of the

3
00:00:05,786 --> 00:00:08,385
Advanced Python course. We've mentioned

4
00:00:08,385 --> 00:00:11,723
metaclasses several times. We owe you an

5
00:00:11,723 --> 00:00:14,834
explanation. In this module we'll look at

6
00:00:14,834 --> 00:00:18,289
the concept of the class of class of

7
00:00:18,289 --> 00:00:21,341
objects, metaclass for short, the default

8
00:00:21,341 --> 00:00:24,024
metaclass called type, specifying

9
00:00:24,024 --> 00:00:27,137
metaclasses in class definitions, defining

10
00:00:27,137 --> 00:00:29,890
metaclasses, including the special methods

11
00:00:29,890 --> 00:00:32,559
of metaclasses, some practical examples of

12
00:00:32,559 --> 00:00:34,533
metaclasses, which solve some problems

13
00:00:34,533 --> 00:00:36,206
we've discovered earlier in the course,

14
00:00:36,206 --> 00:00:40,006
and a look at how metaclasses interact

15
00:00:40,006 --> 00:00:43,983
with inheritance. To assist us on our

16
00:00:43,983 --> 00:00:45,870
journey to understand metaclasses we need

17
00:00:45,870 --> 00:00:49,032
a simple class. We'll use Widget, which

18
00:00:49,032 --> 00:00:52,359
will be empty. We'll instantiate some

19
00:00:52,359 --> 00:00:56,221
widgets and introspect their types using

20
00:00:56,221 --> 00:00:59,738
the type built-in function. We all know

21
00:00:59,738 --> 00:01:02,354
that in Python the type of an instance is

22
00:01:02,354 --> 00:01:06,232
its class, so what is the type of its

23
00:01:06,232 --> 00:01:10,281
class? The type of a class is type. We've

24
00:01:10,281 --> 00:01:11,957
covered this before in the introspection

25
00:01:11,957 --> 00:01:15,533
module of Python Beyond the Basics, but it

26
00:01:15,533 --> 00:01:17,770
bears repeating here. One potentially

27
00:01:17,770 --> 00:01:19,850
confusing aspect here is that we're using

28
00:01:19,850 --> 00:01:22,520
type as a function to determine the type

29
00:01:22,520 --> 00:01:25,670
of an object, but type is also being used

30
00:01:25,670 --> 00:01:28,713
as a value. It is the type of the class

31
00:01:28,713 --> 00:01:30,993
object. However, this duality isn't so

32
00:01:30,993 --> 00:01:33,781
unusual. We see exactly the same situation

33
00:01:33,781 --> 00:01:37,529
with, say, list, where it is used as both

34
00:01:37,529 --> 00:01:40,561
a constructor and the value. Here we use

35
00:01:40,561 --> 00:01:42,777
the list constructor to construct a list

36
00:01:42,777 --> 00:01:46,421
A, and the type of a is also list. Given

37
00:01:46,421 --> 00:01:49,988
that the type of the Widget class is type,

38
00:01:49,988 --> 00:01:53,302
we can say that the metaclass of a widget

39
00:01:53,302 --> 00:01:56,388
is type. In general, the type of any class

40
00:01:56,388 --> 00:01:59,601
object in Python is its metaclass, and the

41
00:01:59,601 --> 00:02:03,199
default metaclass is type. Going even

42
00:02:03,199 --> 00:02:07,417
further, we can discover that the type of

43
00:02:07,417 --> 00:02:10,279
type is type. We can get the same results

44
00:02:10,279 --> 00:02:11,591
by drilling down through the special

45
00:02:11,591 --> 00:02:15,799
attribute, dunder class. Here's w. dunder

46
00:02:15,799 --> 00:02:20,311
class, w. dunder class dunder class, and

47
00:02:20,311 --> 00:02:24,291
w. dunder class dunder class dunder class,

48
00:02:24,291 --> 00:02:30,568
which is the base of the recursion. To

49
00:02:30,568 --> 00:02:32,409
understand where metaclasses fit into

50
00:02:32,409 --> 00:02:34,762
Python we must consider how class objects

51
00:02:34,762 --> 00:02:37,065
are created. When we define a class in a

52
00:02:37,065 --> 00:02:39,548
Python source file like this, with class

53
00:02:39,548 --> 00:02:41,914
Widget, this is actually shorthand for

54
00:02:41,914 --> 00:02:45,405
class Widget with the object base class

55
00:02:45,405 --> 00:02:48,607
and the type metaclass. In the same way

56
00:02:48,607 --> 00:02:58,000
that the base class is implicitly object, the metaclass is implicitly type.

