1
00:00:01,501 --> 00:00:03,648
Python metaclasses can seem very, well,

2
00:00:03,648 --> 00:00:06,884
meta, so it's time for a session on

3
00:00:06,884 --> 00:00:09,603
metaclasses, which solve some actual

4
00:00:09,603 --> 00:00:12,048
problems you've probably encountered. At

5
00:00:12,048 --> 00:00:13,938
some point you've probably run into the

6
00:00:13,938 --> 00:00:16,032
issue that duplicate class attribute names

7
00:00:16,032 --> 00:00:19,538
aren't flagged by Python as errors. Here

8
00:00:19,538 --> 00:00:23,249
we have a class, Dodgy, which contains two

9
00:00:23,249 --> 00:00:25,978
definitions for method. In fact, the

10
00:00:25,978 --> 00:00:28,208
second definition takes precedence because

11
00:00:28,208 --> 00:00:31,548
it overwrites the first entry in the

12
00:00:31,548 --> 00:00:33,995
namespace dictionary as the class

13
00:00:33,995 --> 00:00:36,841
definition is processed. Let's write a

14
00:00:36,841 --> 00:00:39,595
metaclass which detects and prevents this

15
00:00:39,595 --> 00:00:41,737
unfortunate situation occurring. To do

16
00:00:41,737 --> 00:00:44,032
this, rather than using a regular

17
00:00:44,032 --> 00:00:46,111
dictionary as the namespace object used

18
00:00:46,111 --> 00:00:47,756
during class construction, we need a

19
00:00:47,756 --> 00:00:50,397
dictionary which raises an error when we

20
00:00:50,397 --> 00:00:54,182
try to assign to an existing key. Here is

21
00:00:54,182 --> 00:00:56,749
such a dictionary, OneShotDict, which is

22
00:00:56,749 --> 00:00:59,025
implemented by specializing the built-in

23
00:00:59,025 --> 00:01:02,342
dict type and overriding the dunder init

24
00:01:02,342 --> 00:01:05,519
and dunder set item methods. Note that the

25
00:01:05,519 --> 00:01:08,007
built-in dict has a quite sophisticated

26
00:01:08,007 --> 00:01:11,347
initializer, which accepts many forms of

27
00:01:11,347 --> 00:01:14,813
arguments, but something much simpler is

28
00:01:14,813 --> 00:01:18,048
sufficient in our case. After calling the

29
00:01:18,048 --> 00:01:20,165
super class dunder init the dunder init

30
00:01:20,165 --> 00:01:22,337
implementation loops over any entries

31
00:01:22,337 --> 00:01:26,009
which have been passed, inserting each key

32
00:01:26,009 --> 00:01:31,809
and value pair in turn by call to dunder

33
00:01:31,809 --> 00:01:34,298
setitem. In dunder setitem we check

34
00:01:34,298 --> 00:01:36,879
whether the key is already in the

35
00:01:36,879 --> 00:01:43,179
dictionary, and if it is we raise a value

36
00:01:43,179 --> 00:01:46,064
error. Before we use the OneShotDict in a

37
00:01:46,064 --> 00:01:48,062
metaclass let's just check that it's

38
00:01:48,062 --> 00:01:50,687
working as expected. We'll create an

39
00:01:50,687 --> 00:01:53,688
instance of OneShotDict called d, insert

40
00:01:53,688 --> 00:01:58,757
the value 65 against the key A, insert the

41
00:01:58,757 --> 00:02:03,265
value 66 against the key B, and then try

42
00:02:03,265 --> 00:02:07,614
to insert the value 32 against the key A.

43
00:02:07,614 --> 00:02:10,175
As hoped, the value error is triggered.

44
00:02:10,175 --> 00:02:13,322
Now we can design a very simple metaclass,

45
00:02:13,322 --> 00:02:16,175
which uses OneShotDict for the namespace

46
00:02:16,175 --> 00:02:18,421
object called ProhibitDuplicatesMeta. All

47
00:02:18,421 --> 00:02:23,335
we need to do is override the dunder

48
00:02:23,335 --> 00:02:27,259
prepare class method, returning an

49
00:02:27,259 --> 00:02:31,183
instance of our specialized dictionary.

50
00:02:31,183 --> 00:02:33,477
Now if we try to define a class with

51
00:02:33,477 --> 00:02:35,621
duplicate methods using this metaclass we

52
00:02:35,621 --> 00:02:40,115
get an error. The main shortcoming here is

53
00:02:40,115 --> 00:02:43,422
that the error message isn't hugely

54
00:02:43,422 --> 00:02:46,150
informative. Unfortunately, we don't have

55
00:02:46,150 --> 00:02:48,437
access to the part of the runtime machine,

56
00:02:48,437 --> 00:02:50,359
which reads our class definition and

57
00:02:50,359 --> 00:02:52,695
populates the dictionary, so we can't

58
00:02:52,695 --> 00:02:56,128
intercept the ValueError and emit a more

59
00:02:56,128 --> 00:02:59,165
useful error instead. The best we can do,

60
00:02:59,165 --> 00:03:00,900
rather than using a general purpose

61
00:03:00,900 --> 00:03:03,428
collection, like OneShotDict, is simply to

62
00:03:03,428 --> 00:03:05,666
create a functional equivalent called

63
00:03:05,666 --> 00:03:07,808
something like OneShotClassNamespace with

64
00:03:07,808 --> 00:03:11,175
a more specific error message. This has

65
00:03:11,175 --> 00:03:13,929
the benefit that we can pass in additional

66
00:03:13,929 --> 00:03:16,025
diagnostic information, such as the name

67
00:03:16,025 --> 00:03:18,486
of the class currently being defined into

68
00:03:18,486 --> 00:03:20,283
the namespace object on construction,

69
00:03:20,283 --> 00:03:23,112
which helps us produce a more useful

70
00:03:23,112 --> 00:03:26,208
message. We adjust its initializer to

71
00:03:26,208 --> 00:03:29,635
accept a positional name argument, which

72
00:03:29,635 --> 00:03:33,827
we store as an instance attribute, _name.

73
00:03:33,827 --> 00:03:36,800
In the guard clause of dunder set item we

74
00:03:36,800 --> 00:03:39,140
change the exception type from value error

75
00:03:39,140 --> 00:03:41,856
to type error, and edit the error message

76
00:03:41,856 --> 00:03:46,663
to make it both more germane and more

77
00:03:46,663 --> 00:03:48,833
informative. Lastly, we need to remember

78
00:03:48,833 --> 00:03:51,092
to forward the class name, which is past

79
00:03:51,092 --> 00:03:55,544
to dunder prepare, to the

80
00:03:55,544 --> 00:03:57,813
OneShotClassNamespace constructor. When we

81
00:03:57,813 --> 00:03:59,522
try to execute the module containing the

82
00:03:59,522 --> 00:04:01,428
class with the duplicate method definition

83
00:04:01,428 --> 00:04:04,559
we get a much more useful error message,

84
00:04:04,559 --> 00:04:14,000
cannot reassign existing class attribute 'method' of 'Dodgy'. Much better.

