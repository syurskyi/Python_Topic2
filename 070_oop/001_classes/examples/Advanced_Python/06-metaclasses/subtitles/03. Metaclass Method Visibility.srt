1
00:00:01,555 --> 00:00:05,506
Now let's look at metaclass methods and

2
00:00:05,506 --> 00:00:07,835
their visibility. We've covered three

3
00:00:07,835 --> 00:00:09,836
important special methods for metaclasses;

4
00:00:09,836 --> 00:00:12,372
dunder prepare, dunder new, and dunder

5
00:00:12,372 --> 00:00:15,826
init, but what happens if we include other

6
00:00:15,826 --> 00:00:19,044
methods in the metaclass? Let's see by

7
00:00:19,044 --> 00:00:22,586
adding a method called metamethod to the

8
00:00:22,586 --> 00:00:24,748
TracingMeta metaclass we were

9
00:00:24,748 --> 00:00:27,545
experimenting with earlier. It accepts a

10
00:00:27,545 --> 00:00:29,504
single argument, cls, which remember,

11
00:00:29,504 --> 00:00:33,428
means it is an instance method of the

12
00:00:33,428 --> 00:00:37,554
metaclass. Within it we simply print its

13
00:00:37,554 --> 00:00:41,140
argument. Let's create the class widget

14
00:00:41,140 --> 00:00:44,657
again with its TracingMeta metaclass. As

15
00:00:44,657 --> 00:00:47,771
we complete our Widget class definition

16
00:00:47,771 --> 00:00:50,862
the metaclasses are invoked. It turns out

17
00:00:50,862 --> 00:00:53,231
that instance methods of the metaclass can

18
00:00:53,231 --> 00:00:55,519
be accessed similarly to class methods of

19
00:00:55,519 --> 00:00:57,775
the Widget class, and will have the

20
00:00:57,775 --> 00:01:01,404
regular class passed to them as the first

21
00:01:01,404 --> 00:01:04,537
and implicit argument. Here we call

22
00:01:04,537 --> 00:01:08,082
metamethod directly on the Widget class.

23
00:01:08,082 --> 00:01:10,316
However, unlike regular class methods we

24
00:01:10,316 --> 00:01:13,580
create with the class method decorator, we

25
00:01:13,580 --> 00:01:17,787
cannot access so called metamethods via

26
00:01:17,787 --> 00:01:20,772
the Widget instance. Metamethods are

27
00:01:20,772 --> 00:01:23,417
rarely used in practice, although one

28
00:01:23,417 --> 00:01:26,107
metamethod in particular has an

29
00:01:26,107 --> 00:01:29,724
interesting use, dunder call, which we'll

30
00:01:29,724 --> 00:01:32,567
look at shortly. Class method definitions

31
00:01:32,567 --> 00:01:35,328
in the regular class and its base classes

32
00:01:35,328 --> 00:01:38,778
will take precedence over looking up a

33
00:01:38,778 --> 00:01:41,547
method in its metaclass. Regular methods

34
00:01:41,547 --> 00:01:44,737
of the metaclass accept cls as their first

35
00:01:44,737 --> 00:01:47,434
argument. This makes sense because cls,

36
00:01:47,434 --> 00:01:50,650
the class, is the instance of the

37
00:01:50,650 --> 00:01:53,873
metaclass. It is analogous to self. On the

38
00:01:53,873 --> 00:01:56,777
other hand, class methods of the metaclass

39
00:01:56,777 --> 00:02:00,530
accept mcs as their first argument, the

40
00:02:00,530 --> 00:02:10,000
metaclass, analogous to the cls argument of a class method in a regular class.

