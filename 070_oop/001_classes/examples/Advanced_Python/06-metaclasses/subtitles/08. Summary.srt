1
00:00:01,531 --> 00:00:03,109
We've covered a lot of ground in this

2
00:00:03,109 --> 00:00:04,751
course module, and you should now know

3
00:00:04,751 --> 00:00:06,720
more than the majority of Python

4
00:00:06,720 --> 00:00:09,236
developers about the customization of

5
00:00:09,236 --> 00:00:12,665
class creation using metaclasses. All

6
00:00:12,665 --> 00:00:15,218
classes have a metaclass, which is the

7
00:00:15,218 --> 00:00:18,622
type of the class object. The default type

8
00:00:18,622 --> 00:00:22,319
of class objects is type. The metaclass is

9
00:00:22,319 --> 00:00:24,095
responsible for processing the class

10
00:00:24,095 --> 00:00:26,673
definition parsed from the source code

11
00:00:26,673 --> 00:00:29,633
into a class object. The dunder prepare

12
00:00:29,633 --> 00:00:31,996
metaclass method must return a mapping

13
00:00:31,996 --> 00:00:34,389
object, which the Python runtime will

14
00:00:34,389 --> 00:00:36,387
populate with the namespace items

15
00:00:36,387 --> 00:00:39,665
collected from parsing and executing the

16
00:00:39,665 --> 00:00:41,980
class definition. The dunder new metaclass

17
00:00:41,980 --> 00:00:44,121
method must allocate and return a class

18
00:00:44,121 --> 00:00:47,011
object and configure it using the contents

19
00:00:47,011 --> 00:00:49,908
of the class namespace, the list of base

20
00:00:49,908 --> 00:00:52,088
classes passed from the definition and any

21
00:00:52,088 --> 00:00:54,969
additional keyword arguments passed from

22
00:00:54,969 --> 00:00:57,427
the definition. The dunder init metaclass

23
00:00:57,427 --> 00:00:59,772
can be used to further configure the class

24
00:00:59,772 --> 00:01:04,246
object and must have the same signature as

25
00:01:04,246 --> 00:01:06,691
dunder new. The dunder call metaclass

26
00:01:06,691 --> 00:01:08,453
method, in effect, implements the

27
00:01:08,453 --> 00:01:10,753
constructor for instances of the class,

28
00:01:10,753 --> 00:01:13,940
and is invoked when we construct an

29
00:01:13,940 --> 00:01:16,996
instance. An important use case for

30
00:01:16,996 --> 00:01:19,586
metaclasses is to support so-called named

31
00:01:19,586 --> 00:01:21,666
descriptors, whereby we can configure

32
00:01:21,666 --> 00:01:23,421
descriptor objects, such as properties,

33
00:01:23,421 --> 00:01:26,492
with the name of the class attribute to

34
00:01:26,492 --> 00:01:29,385
which they are assigned. Strict rules

35
00:01:29,385 --> 00:01:31,720
control how multiple metaclasses interact

36
00:01:31,720 --> 00:01:34,004
in the presence of inheritance

37
00:01:34,004 --> 00:01:36,678
relationships between the regular classes

38
00:01:36,678 --> 00:01:39,677
which use them. Judicial metaclass design

39
00:01:39,677 --> 00:01:43,394
using super to delegate via the MRO can

40
00:01:43,394 --> 00:01:46,158
yield metaclasses which compose

41
00:01:46,158 --> 00:01:48,112
gracefully. Thanks for watching, and we'll

42
00:01:48,112 --> 00:01:50,134
see you in the next module where we'll

43
00:01:50,134 --> 00:01:52,868
look at a simpler, but less capable

44
00:01:52,868 --> 00:02:01,000
alternative to metaclasses for many uses, class decorators.

