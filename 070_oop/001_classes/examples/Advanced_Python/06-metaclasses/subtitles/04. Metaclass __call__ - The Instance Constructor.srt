1
00:00:01,481 --> 00:00:04,114
Now let's look at how to achieve very

2
00:00:04,114 --> 00:00:06,450
fine-grained instantiation control by

3
00:00:06,450 --> 00:00:10,263
overriding metaclass dunder call. For a

4
00:00:10,263 --> 00:00:11,636
moment return your thoughts to the

5
00:00:11,636 --> 00:00:13,554
material we covered in the previous module

6
00:00:13,554 --> 00:00:16,652
of this course when we looked at instance

7
00:00:16,652 --> 00:00:19,044
allocation with dunder new. We know that

8
00:00:19,044 --> 00:00:21,798
in order to create instances we call the

9
00:00:21,798 --> 00:00:24,704
constructor of the designed class. We have

10
00:00:24,704 --> 00:00:27,662
learned that behind the scenes this will

11
00:00:27,662 --> 00:00:30,658
call Widget. dunder new to allocate a

12
00:00:30,658 --> 00:00:34,612
widget followed by Widgit. dunder init, to

13
00:00:34,612 --> 00:00:37,961
do any further initialization. Let's pull

14
00:00:37,961 --> 00:00:41,957
back the curtain, and see exactly what is

15
00:00:41,957 --> 00:00:44,640
behind the scenes. The behavior of calling

16
00:00:44,640 --> 00:00:47,010
dunder new followed by dunder init when we

17
00:00:47,010 --> 00:00:50,258
call a constructor is actually the

18
00:00:50,258 --> 00:00:53,507
responsibility of dunder call on the

19
00:00:53,507 --> 00:00:55,882
metaclass. This makes sense when we

20
00:00:55,882 --> 00:00:58,449
remember that dunder call is a metamethod,

21
00:00:58,449 --> 00:01:00,995
and therefore can be called like a class

22
00:01:00,995 --> 00:01:03,658
method, and that dunder call makes the

23
00:01:03,658 --> 00:01:07,408
objects on which it is defined callable,

24
00:01:07,408 --> 00:01:10,376
like functions. This is the mechanism by

25
00:01:10,376 --> 00:01:12,653
which classes in Python become callable,

26
00:01:12,653 --> 00:01:15,203
and what we have been referring hither to

27
00:01:15,203 --> 00:01:19,533
as a constructor call is, in fact, the

28
00:01:19,533 --> 00:01:24,287
dunder call metamethod. Let's see this in

29
00:01:24,287 --> 00:01:27,817
action by overriding dunder call in our

30
00:01:27,817 --> 00:01:30,603
TracingMeta example. Within dunder call we

31
00:01:30,603 --> 00:01:33,616
print out its name and arguments, forward

32
00:01:33,616 --> 00:01:36,397
the call with super to the type metaclass,

33
00:01:36,397 --> 00:01:39,543
and then print out the return value from

34
00:01:39,543 --> 00:01:42,617
the super class. We'll also implement a

35
00:01:42,617 --> 00:01:46,385
TracingClass, which will use TracingMeta

36
00:01:46,385 --> 00:01:49,932
as its metaclass. Tracing class overrides

37
00:01:49,932 --> 00:01:53,792
dunder new and dunder init, so we can see

38
00:01:53,792 --> 00:01:56,049
when they're called. Notice that when we

39
00:01:56,049 --> 00:01:57,747
import the module into the REPL the

40
00:01:57,747 --> 00:01:59,930
metaclass trifecta, dunder prepare, dunder

41
00:01:59,930 --> 00:02:03,903
new, and dunder init are invoked when the

42
00:02:03,903 --> 00:02:06,792
TracingClass is defined. Now we'll

43
00:02:06,792 --> 00:02:09,384
instantiate TracingClass with a positional

44
00:02:09,384 --> 00:02:12,391
argument and a keyword argument to its

45
00:02:12,391 --> 00:02:16,720
constructor, 42 and keyword clef. Look

46
00:02:16,720 --> 00:02:21,780
carefully at the control flow here. Our

47
00:02:21,780 --> 00:02:24,071
call to the constructor invokes dunder

48
00:02:24,071 --> 00:02:26,628
call on the metaclass, which receives the

49
00:02:26,628 --> 00:02:29,126
arguments we passed to the constructor, in

50
00:02:29,126 --> 00:02:32,197
addition to the type we're trying to

51
00:02:32,197 --> 00:02:35,157
construct. Out dunder call override calls

52
00:02:35,157 --> 00:02:37,974
the super class implementation, which is

53
00:02:37,974 --> 00:02:41,177
type. dunder call in this case. See how

54
00:02:41,177 --> 00:02:44,206
type. dunder call in turn calls

55
00:02:44,206 --> 00:02:47,253
TracingClass. dunder new, followed by

56
00:02:47,253 --> 00:02:50,234
TracingClass. dunder init. In other words,

57
00:02:50,234 --> 00:02:53,074
it is type. dunder call, which

58
00:02:53,074 --> 00:02:55,417
orchestrates the default class allocation

59
00:02:55,417 --> 00:02:58,632
and initialization behavior. It is very

60
00:02:58,632 --> 00:03:02,853
rare to see the dunder call metamethod

61
00:03:02,853 --> 00:03:05,159
overridden. It's pretty low level in

62
00:03:05,159 --> 00:03:07,542
Python terms, and provides some of the

63
00:03:07,542 --> 00:03:11,516
most basic Python machinery. That said, it

64
00:03:11,516 --> 00:03:15,205
can be powerful. In keywordmeta. py we

65
00:03:15,205 --> 00:03:18,484
have an example of a metaclass overriding

66
00:03:18,484 --> 00:03:20,971
dunder call, which prevents classes, which

67
00:03:20,971 --> 00:03:23,754
use the metaclass, excepting positional

68
00:03:23,754 --> 00:03:27,468
arguments to their constructors. In dunder

69
00:03:27,468 --> 00:03:29,753
call we detect if args is non-empty, and

70
00:03:29,753 --> 00:03:33,220
if that's the case we raise a type error.

71
00:03:33,220 --> 00:03:36,474
We've also defined a regular class called

72
00:03:36,474 --> 00:03:40,346
ConstrainedToKeywords, which uses

73
00:03:40,346 --> 00:03:45,937
KeywordsOnlyMeta as its metaclass. Even

74
00:03:45,937 --> 00:03:48,508
though the dunder init method in

75
00:03:48,508 --> 00:03:49,921
ConstrainedToKeywords accepts positional

76
00:03:49,921 --> 00:03:52,700
arguments through *args, execution never

77
00:03:52,700 --> 00:03:55,628
gets this far, as non-empty positional

78
00:03:55,628 --> 00:03:58,151
argument lists are intercepted by dunder

79
00:03:58,151 --> 00:04:00,748
call in the KeywordsOnlyMeta metaclass,

80
00:04:00,748 --> 00:04:05,101
which causes a type error to be raised.

81
00:04:05,101 --> 00:04:07,453
Constructor calls which contain only

82
00:04:07,453 --> 00:04:10,226
keyword arguments are permitted, as we

83
00:04:10,226 --> 00:04:13,347
designed. We've covered a lot of the

84
00:04:13,347 --> 00:04:16,131
theory and practice behind metaclasses.

85
00:04:16,131 --> 00:04:24,000
Now well build on those ideas with some useful applications.

