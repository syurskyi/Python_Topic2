1
00:00:01,462 --> 00:00:03,391
We've covered a crucial topic in this

2
00:00:03,391 --> 00:00:05,480
short course module, the distinction

3
00:00:05,480 --> 00:00:08,633
between the allocation and initialization

4
00:00:08,633 --> 00:00:11,141
of instances. We showed how the static

5
00:00:11,141 --> 00:00:12,885
method, dunder new, is called to allocate

6
00:00:12,885 --> 00:00:15,750
and return a new instance. It is

7
00:00:15,750 --> 00:00:18,135
implicitly a static method, which accepts

8
00:00:18,135 --> 00:00:21,018
the class of the new instance as its first

9
00:00:21,018 --> 00:00:23,987
argument, and doesn't require either the

10
00:00:23,987 --> 00:00:27,165
class method or static method decorators.

11
00:00:27,165 --> 00:00:30,745
Ultimately, object. dunder new allocates

12
00:00:30,745 --> 00:00:33,608
all instances. One use for overloading

13
00:00:33,608 --> 00:00:35,754
dunder new is to support instance

14
00:00:35,754 --> 00:00:37,661
interning, which can be useful when

15
00:00:37,661 --> 00:00:39,519
certain values of immutable value types

16
00:00:39,519 --> 00:00:42,207
are very common or when the domain of

17
00:00:42,207 --> 00:00:45,194
values is small and finite, such as with

18
00:00:45,194 --> 00:00:48,306
the squares of a chess board. This isn't

19
00:00:48,306 --> 00:00:50,176
the whole story though, and Python offers

20
00:00:50,176 --> 00:00:52,164
yet more control over instance creation at

21
00:00:52,164 --> 00:00:54,536
the class level, although before we get to

22
00:00:54,536 --> 00:00:57,412
that we need to understand meta classes.

23
00:00:57,412 --> 00:01:03,000
Thanks for watching, and we'll see you in the next module.

