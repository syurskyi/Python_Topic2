1
00:00:01,583 --> 00:00:04,429
So let's figure out the signature of

2
00:00:04,429 --> 00:00:06,834
dunder new. We'll implement the most basic

3
00:00:06,834 --> 00:00:08,754
override of dunder new, which simply

4
00:00:08,754 --> 00:00:10,372
delegates to the base class

5
00:00:10,372 --> 00:00:12,189
implementation, although we'll add a few

6
00:00:12,189 --> 00:00:14,281
print statements, so we can easily inspect

7
00:00:14,281 --> 00:00:16,532
the arguments and return value. Notice

8
00:00:16,532 --> 00:00:19,972
that dunder new appears to be implicitly a

9
00:00:19,972 --> 00:00:24,726
class method. It accepts cls as its first

10
00:00:24,726 --> 00:00:27,923
argument rather than self. In fact, dunder

11
00:00:27,923 --> 00:00:30,461
new is especially cased static method that

12
00:00:30,461 --> 00:00:32,120
happens to take the type of the class as

13
00:00:32,120 --> 00:00:34,598
its first argument, but the distinction

14
00:00:34,598 --> 00:00:37,549
isn't important here. The cls argument is

15
00:00:37,549 --> 00:00:40,626
the class of the new object, which will be

16
00:00:40,626 --> 00:00:42,822
allocated. In our case, that will be

17
00:00:42,822 --> 00:00:44,676
ChessCoordinate, but in the presence of

18
00:00:44,676 --> 00:00:46,443
inheritance it isn't necessarily the case

19
00:00:46,443 --> 00:00:49,520
that the cls argument will be set to the

20
00:00:49,520 --> 00:00:51,927
class in closing the dunder new

21
00:00:51,927 --> 00:00:54,192
definition. In general, dunder new accepts

22
00:00:54,192 --> 00:00:56,353
in addition whatever parameters have been

23
00:00:56,353 --> 00:00:58,436
passed to the constructor. In this case,

24
00:00:58,436 --> 00:01:00,904
we've soaked up any such arguments using

25
00:01:00,904 --> 00:01:03,886
*args and ** keyword args, although we

26
00:01:03,886 --> 00:01:06,395
could have used specific argument names

27
00:01:06,395 --> 00:01:09,709
here, just as we have with dunder init.

28
00:01:09,709 --> 00:01:11,577
We'll print these additional argument

29
00:01:11,577 --> 00:01:14,163
values to the console. Remember that the

30
00:01:14,163 --> 00:01:17,435
purpose of dunder new is to allocate a new

31
00:01:17,435 --> 00:01:19,686
object. There's no special command for

32
00:01:19,686 --> 00:01:22,077
that in Python. All object allocation must

33
00:01:22,077 --> 00:01:24,279
be done by the dunder new implementation

34
00:01:24,279 --> 00:01:27,598
on the ultimate base class object. Here,

35
00:01:27,598 --> 00:01:30,799
rather than call the object. dunder new

36
00:01:30,799 --> 00:01:33,409
implementation directly, we'll call it via

37
00:01:33,409 --> 00:01:36,003
super. Should our immediate base class

38
00:01:36,003 --> 00:01:38,594
change in future this is more

39
00:01:38,594 --> 00:01:40,419
maintainable. The return value from the

40
00:01:40,419 --> 00:01:42,647
call to object. dunder new is the new

41
00:01:42,647 --> 00:01:45,406
instance of ChessCoordinate. We'll print

42
00:01:45,406 --> 00:01:49,453
its id. Remember, we can't expect repr to

43
00:01:49,453 --> 00:01:52,711
work yet, and then return. It is this

44
00:01:52,711 --> 00:01:54,859
returned object that is then passed as the

45
00:01:54,859 --> 00:01:57,019
self-argument to dunder init. We have

46
00:01:57,019 --> 00:02:00,422
printed the id of self here in dunder init

47
00:02:00,422 --> 00:02:02,954
to demonstrate that this is indeed the

48
00:02:02,954 --> 00:02:06,537
case. We see that the id of obj in dunder

49
00:02:06,537 --> 00:02:10,099
new is equal to the id of self in dunder

50
00:02:10,099 --> 00:02:13,524
init, and also that the constructor

51
00:02:13,524 --> 00:02:19,000
arguments have been forwarded to dunder new as expected.

