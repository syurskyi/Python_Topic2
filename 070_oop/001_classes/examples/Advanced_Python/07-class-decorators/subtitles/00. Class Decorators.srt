1
00:00:00,000 --> 00:00:02,876
Hello. My name is Robert Smallshire.

2
00:00:02,876 --> 00:00:06,390
Welcome to the seventh module of the

3
00:00:06,390 --> 00:00:09,061
Advanced Python course. There's no doubt

4
00:00:09,061 --> 00:00:11,048
that metaclasses can be difficult to

5
00:00:11,048 --> 00:00:12,710
understand and reason about. Fortunately,

6
00:00:12,710 --> 00:00:14,730
Python supports an alternative, which is

7
00:00:14,730 --> 00:00:17,289
sufficient for many cases where we want to

8
00:00:17,289 --> 00:00:19,489
customize classes at the point they are

9
00:00:19,489 --> 00:00:21,850
defined. This alternative is the class

10
00:00:21,850 --> 00:00:24,596
decorator. It's worth bearing in mind that

11
00:00:24,596 --> 00:00:26,909
anything that can be achieved with a class

12
00:00:26,909 --> 00:00:29,324
decorator can also be achieved with a

13
00:00:29,324 --> 00:00:31,842
metaclass, although the reverse is not

14
00:00:31,842 --> 00:00:34,970
true. In other words, class decorators are

15
00:00:34,970 --> 00:00:37,054
less powerful than metaclasses, although

16
00:00:37,054 --> 00:00:39,003
they are much easier to understand, so

17
00:00:39,003 --> 00:00:40,951
should be preferred whenever the desired

18
00:00:40,951 --> 00:00:43,546
effect can be achieved with either a

19
00:00:43,546 --> 00:00:45,935
metaclass or a class decorator. Class

20
00:00:45,935 --> 00:00:49,232
decorators work in much the same way as

21
00:00:49,232 --> 00:00:50,977
function decorators. They apply a

22
00:00:50,977 --> 00:00:53,126
transformation to a class after the class

23
00:00:53,126 --> 00:00:55,304
definition body has been processed, but

24
00:00:55,304 --> 00:00:58,432
before the definition is bound to the name

25
00:00:58,432 --> 00:01:01,173
of the class. Let's start with a very

26
00:01:01,173 --> 00:01:02,740
simple temperature class, which is

27
00:01:02,740 --> 00:01:04,347
decorated with a function,

28
00:01:04,347 --> 00:01:06,501
my_class_decorator. Set aside for the

29
00:01:06,501 --> 00:01:09,068
moment that these getter and setter

30
00:01:09,068 --> 00:01:11,625
methods are hardly the most Pythonic

31
00:01:11,625 --> 00:01:13,783
solution, they'll serve our purpose for

32
00:01:13,783 --> 00:01:16,361
the time being. To understand how class

33
00:01:16,361 --> 00:01:19,053
decorators work, my class decorator is a

34
00:01:19,053 --> 00:01:21,084
very simple function, which simply

35
00:01:21,084 --> 00:01:24,025
iterates over and prints the attributes of

36
00:01:24,025 --> 00:01:27,337
the class object. The class decorator must

37
00:01:27,337 --> 00:01:30,321
accept the class object as its only

38
00:01:30,321 --> 00:01:32,867
argument by a convention called cls, and

39
00:01:32,867 --> 00:01:35,500
must return the modified class object or

40
00:01:35,500 --> 00:01:38,196
an alternative class object, which will be

41
00:01:38,196 --> 00:01:41,815
bound to the class name given in the

42
00:01:41,815 --> 00:01:44,077
definition, in this case, Temperature.

43
00:01:44,077 --> 00:01:46,195
When we import our module into a REPL

44
00:01:46,195 --> 00:01:48,756
session we can see that the decorator is

45
00:01:48,756 --> 00:01:51,674
executed when the temperature class is

46
00:01:51,674 --> 00:01:54,974
first defined, which is when the module is

47
00:01:54,974 --> 00:01:57,186
first imported. The class attributes

48
00:01:57,186 --> 00:02:00,057
discovered by our decorator are dunder

49
00:02:00,057 --> 00:02:02,910
module, our get_kelvin and set_kelvin

50
00:02:02,910 --> 00:02:06,581
methods, dunder init, dunder weakref, and

51
00:02:06,581 --> 00:02:09,226
dunder dict. It's important for our

52
00:02:09,226 --> 00:02:11,083
Temperature class to maintain an important

53
00:02:11,083 --> 00:02:13,684
invariant of the universe in which we live

54
00:02:13,684 --> 00:02:15,857
that temperatures cannot be lower than

55
00:02:15,857 --> 00:02:19,345
absolute 0, which is 0 Kelvin. Rather than

56
00:02:19,345 --> 00:02:22,204
require that every method of our class

57
00:02:22,204 --> 00:02:24,192
individually honors this class invariant,

58
00:02:24,192 --> 00:02:31,000
we'll use a class decorator to wrap every method in an invariant checking proxy.

