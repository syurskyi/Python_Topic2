1
00:00:01,654 --> 00:00:03,706
For a final demonstration we'll show that

2
00:00:03,706 --> 00:00:06,797
we can chain class decorators just as we

3
00:00:06,797 --> 00:00:09,338
can with function decorators. We've added

4
00:00:09,338 --> 00:00:11,514
a second invariant to be maintained to

5
00:00:11,514 --> 00:00:14,760
ensure that the temperature is below the

6
00:00:14,760 --> 00:00:17,745
hypothetical value, absolute hot. You can

7
00:00:17,745 --> 00:00:20,093
read more about this on Wikipedia if

8
00:00:20,093 --> 00:00:22,338
you're interested in the physics. At the

9
00:00:22,338 --> 00:00:24,611
REPL we can see that both constraints are

10
00:00:24,611 --> 00:00:26,463
enforced when we call instance methods,

11
00:00:26,463 --> 00:00:29,684
such as set to Kelvin. We start with a

12
00:00:29,684 --> 00:00:32,414
temperature of 37. 5 Kelvin, we're

13
00:00:32,414 --> 00:00:35,260
prevented from setting a negative Kelvin

14
00:00:35,260 --> 00:00:38,460
value, and if we try to set a Kelvin value

15
00:00:38,460 --> 00:00:42,251
larger than absolute hot, 1 * 10 to the

16
00:00:42,251 --> 00:00:45,346
33, the attempted invariant violation is

17
00:00:45,346 --> 00:00:47,491
detected. Our class decorator has no

18
00:00:47,491 --> 00:00:49,120
problem decorating the already decorated

19
00:00:49,120 --> 00:00:51,584
methods on its second implication. The

20
00:00:51,584 --> 00:00:53,981
proxy and properties are another story

21
00:00:53,981 --> 00:00:56,246
though. Although the lower bound check

22
00:00:56,246 --> 00:00:59,021
works as before on the properties, when we

23
00:00:59,021 --> 00:01:01,650
try to set the temperature of -300 the

24
00:01:01,650 --> 00:01:04,007
violation is detected. Attempts to violate

25
00:01:04,007 --> 00:01:07,028
on the upper bound are not detected, so

26
00:01:07,028 --> 00:01:10,356
setting a temperature of 1 * 10 to the 34

27
00:01:10,356 --> 00:01:13,123
Celsius doesn't fail as it should. The

28
00:01:13,123 --> 00:01:16,065
problem here is that our class decorator

29
00:01:16,065 --> 00:01:18,328
is detecting specifically property

30
00:01:18,328 --> 00:01:22,013
instances with the is instance check;

31
00:01:22,013 --> 00:01:24,215
however, our invariant checking and

32
00:01:24,215 --> 00:01:27,818
property proxy is not a property, so our

33
00:01:27,818 --> 00:01:29,737
proxy which enforces the

34
00:01:29,737 --> 00:01:31,743
not_below_absolute_0 invariant is applied

35
00:01:31,743 --> 00:01:35,138
to the genuine property, although the

36
00:01:35,138 --> 00:01:37,904
below_absolute_hot proxy is not applied to

37
00:01:37,904 --> 00:01:40,355
the invariant checking and property proxy.

38
00:01:40,355 --> 00:01:42,980
For a solution to this problem we'll use

39
00:01:42,980 --> 00:01:46,292
Python's abstract base class mechanism, a

40
00:01:46,292 --> 00:01:50,000
topic we'll explore in the next module of this course.

