1
00:00:01,406 --> 00:00:03,917
Although dunder getattr works fine with

2
00:00:03,917 --> 00:00:06,007
attributes we've carefully faked, such as

3
00:00:06,007 --> 00:00:08,513
p, look what happens when we try to access

4
00:00:08,513 --> 00:00:11,112
an attribute for which there is no fake

5
00:00:11,112 --> 00:00:14,060
support, such as x. We get a runtime

6
00:00:14,060 --> 00:00:16,043
error, maximum recursion depth exceeded

7
00:00:16,043 --> 00:00:19,330
while calling a Python object. In other

8
00:00:19,330 --> 00:00:22,245
words, we've got infinite recursion. This

9
00:00:22,245 --> 00:00:24,778
happens because our request for attribute

10
00:00:24,778 --> 00:00:28,397
x causes dunder getattr to look for an

11
00:00:28,397 --> 00:00:31,276
attribute, _x, which doesn't exist. This

12
00:00:31,276 --> 00:00:34,531
in turn invokes dunder getattr again to

13
00:00:34,531 --> 00:00:37,137
look up attribute __x, which doesn't

14
00:00:37,137 --> 00:00:39,748
exist, and so on recursively until the

15
00:00:39,748 --> 00:00:42,978
Python interpreter exceeds its maximum

16
00:00:42,978 --> 00:00:47,265
recursion depth and raises a runtime

17
00:00:47,265 --> 00:00:49,244
error. To prevent this happening you might

18
00:00:49,244 --> 00:00:51,533
be tempted to check for the existence of

19
00:00:51,533 --> 00:00:54,601
the private attribute using hasattr, like

20
00:00:54,601 --> 00:00:58,025
this, raising an AttributeError if the

21
00:00:58,025 --> 00:01:00,938
private attribute can't be found.

22
00:01:00,938 --> 00:01:02,771
Unfortunately, this doesn't work either,

23
00:01:02,771 --> 00:01:05,761
since it turns out that hasattr also

24
00:01:05,761 --> 00:01:09,236
ultimately calls dunder getattr in search

25
00:01:09,236 --> 00:01:12,413
of the attribute. What we need to do is

26
00:01:12,413 --> 00:01:14,093
directly check for the presence of our

27
00:01:14,093 --> 00:01:20,748
attribute in dunder dict using the not in

28
00:01:20,748 --> 00:01:23,451
operator. This now works as we would wish.

29
00:01:23,451 --> 00:01:26,375
We can create a vector with components p=9

30
00:01:26,375 --> 00:01:31,663
and q=14. We can display the vector, which

31
00:01:31,663 --> 00:01:35,005
echoes those values back to us. We can

32
00:01:35,005 --> 00:01:36,871
query individual components, such as p,

33
00:01:36,871 --> 00:01:39,189
which is of course equal to nine, but when

34
00:01:39,189 --> 00:01:42,309
we request x, which is not defined, an

35
00:01:42,309 --> 00:01:46,119
AttributeError is raised, as we would

36
00:01:46,119 --> 00:01:48,456
expect. In fact, attribute lookup in

37
00:01:48,456 --> 00:01:50,392
Python follows a pretty complex procedure,

38
00:01:50,392 --> 00:01:53,147
so instead of invoking that procedure

39
00:01:53,147 --> 00:01:55,928
again, by calling getattr, we can just

40
00:01:55,928 --> 00:01:58,251
directly return the attribute from dunder

41
00:01:58,251 --> 00:02:00,757
dict. This also enables us to switch to

42
00:02:00,757 --> 00:02:02,885
easier to ask forgiveness than permission,

43
00:02:02,885 --> 00:02:06,567
EAFP style programming, rather than look

44
00:02:06,567 --> 00:02:09,248
before you leap, LBYL style programming.

45
00:02:09,248 --> 00:02:11,209
Now the code attempts to retrieve the

46
00:02:11,209 --> 00:02:13,622
attribute with a private name directly

47
00:02:13,622 --> 00:02:16,363
from dunder dict. If it's not there a

48
00:02:16,363 --> 00:02:18,511
KeyError is raised, and in the except

49
00:02:18,511 --> 00:02:22,752
KeyError block we convert that to an

50
00:02:22,752 --> 00:02:24,883
AttributeError. Of course, the easier to

51
00:02:24,883 --> 00:02:26,359
ask forgiveness than permission version

52
00:02:26,359 --> 00:02:34,000
has exactly the same behavior as the look before you leap version.

