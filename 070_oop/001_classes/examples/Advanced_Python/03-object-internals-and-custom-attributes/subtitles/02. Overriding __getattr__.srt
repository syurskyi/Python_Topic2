1
00:00:03,486 --> 00:00:06,194
What we'd like to do is to fake the

2
00:00:06,194 --> 00:00:08,824
existence of p for read access, and to do

3
00:00:08,824 --> 00:00:10,746
that we need to intercept attribute access

4
00:00:10,746 --> 00:00:13,905
before the AttributeError is raised. To do

5
00:00:13,905 --> 00:00:16,717
that we could use dunder getattr. Notice

6
00:00:16,717 --> 00:00:19,747
that there are two very similarly named

7
00:00:19,747 --> 00:00:23,444
methods, dunder getattr, and dunder

8
00:00:23,444 --> 00:00:26,578
getattribute. The former is only called

9
00:00:26,578 --> 00:00:29,374
when regular attribute lookup fails. The

10
00:00:29,374 --> 00:00:32,185
latter is called for all attribute access,

11
00:00:32,185 --> 00:00:34,558
irrespective of whether an attribute of

12
00:00:34,558 --> 00:00:38,097
the requests name exists of not. For our

13
00:00:38,097 --> 00:00:42,309
case, we'll be using dunder getattr to

14
00:00:42,309 --> 00:00:44,992
intercept lookup failures. Here's our

15
00:00:44,992 --> 00:00:46,749
vector definition, which incorporates

16
00:00:46,749 --> 00:00:49,464
dunder getattr. We've just added a simple

17
00:00:49,464 --> 00:00:52,101
stub that prints the attribute name. When

18
00:00:52,101 --> 00:00:54,259
we request non-existent attributes the

19
00:00:54,259 --> 00:00:57,551
name of the attribute is now printed. Here

20
00:00:57,551 --> 00:01:00,538
we ask for p and it prints name = p, and

21
00:01:00,538 --> 00:01:03,637
when we ask for q it prints name = q, but

22
00:01:03,637 --> 00:01:05,988
when we request the name of an attribute

23
00:01:05,988 --> 00:01:08,524
that does exist we simply get the

24
00:01:08,524 --> 00:01:10,393
attribute value, indicating that dunder

25
00:01:10,393 --> 00:01:15,720
getattr isn't being called in these cases.

26
00:01:15,720 --> 00:01:17,909
Now we can modify dunder getattr to

27
00:01:17,909 --> 00:01:21,547
prepend the underscore to the name, and

28
00:01:21,547 --> 00:01:27,771
retrieve the underlying attribute for us.

29
00:01:27,771 --> 00:01:30,044
At first sight, this appears to work just

30
00:01:30,044 --> 00:01:34,319
fine. Now we can retrieve p and q, but

31
00:01:34,319 --> 00:01:36,813
there's some serious problems lurking

32
00:01:36,813 --> 00:01:39,495
here. The first is that we can still

33
00:01:39,495 --> 00:01:43,525
assign to p and q. Here we set p to 13.

34
00:01:43,525 --> 00:01:45,995
Remember that there wasn't really an

35
00:01:45,995 --> 00:01:48,556
attribute called p, but Python has no

36
00:01:48,556 --> 00:01:51,421
qualms about creating it for us on demand.

37
00:01:51,421 --> 00:01:53,779
Worse, because we have unwittingly brought

38
00:01:53,779 --> 00:01:56,419
p into existence, dunder getattr is no

39
00:01:56,419 --> 00:01:58,989
longer invoked for requests for p, even

40
00:01:58,989 --> 00:02:01,641
though our hidden attribute, _p, is still

41
00:02:01,641 --> 00:02:04,421
there behind the scenes with a different

42
00:02:04,421 --> 00:02:14,000
value. Currently, p has a value of 13, and _p has a value of 5.

