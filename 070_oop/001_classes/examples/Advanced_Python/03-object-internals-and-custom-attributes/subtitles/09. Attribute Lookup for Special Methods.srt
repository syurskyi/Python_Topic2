1
00:00:01,505 --> 00:00:04,038
Some special methods appear to bypass

2
00:00:04,038 --> 00:00:07,356
dunder getattribute. Let's look at what's

3
00:00:07,356 --> 00:00:10,756
going on. It's important to realize that

4
00:00:10,756 --> 00:00:12,486
dunder getattribute only intercepts

5
00:00:12,486 --> 00:00:16,365
attribute lookup through the dot operator.

6
00:00:16,365 --> 00:00:19,735
Let's create a colored vector called cv

7
00:00:19,735 --> 00:00:24,004
and a LoggingProxy for it called cw. If we

8
00:00:24,004 --> 00:00:27,152
call the dunder repr method directly on

9
00:00:27,152 --> 00:00:30,258
our proxy, cw, the call is routed via the

10
00:00:30,258 --> 00:00:32,016
proxy, and is dispatched successfully on

11
00:00:32,016 --> 00:00:35,830
the target, returning the repr for

12
00:00:35,830 --> 00:00:38,548
ColoredVector. However, if we request the

13
00:00:38,548 --> 00:00:41,462
repr of cw in the conventional manner

14
00:00:41,462 --> 00:00:43,731
using the built-in function the dunder

15
00:00:43,731 --> 00:00:45,979
getattribute function of our logging proxy

16
00:00:45,979 --> 00:00:49,135
is not invoked. The call is not forwarded

17
00:00:49,135 --> 00:00:52,084
to the ColoredVector, and instead we get

18
00:00:52,084 --> 00:00:54,733
the default repr for the LoggingProxy

19
00:00:54,733 --> 00:00:56,836
object. This demonstrates that dunder

20
00:00:56,836 --> 00:00:59,653
getattribute can only be used to intercept

21
00:00:59,653 --> 00:01:01,592
special method calls when the special

22
00:01:01,592 --> 00:01:03,961
method is retrieved directly, which is

23
00:01:03,961 --> 00:01:06,610
something we don't normally do. Normal

24
00:01:06,610 --> 00:01:08,504
access to facilities provided by special

25
00:01:08,504 --> 00:01:10,683
methods is through the built-in functions,

26
00:01:10,683 --> 00:01:14,805
such as len, iter, and repr, and so on.

27
00:01:14,805 --> 00:01:17,362
These all bypass the dunder getattribute

28
00:01:17,362 --> 00:01:19,304
mechanism for performance reasons. What

29
00:01:19,304 --> 00:01:21,436
this means in practice is that if you want

30
00:01:21,436 --> 00:01:23,860
to write a proxy object, such as

31
00:01:23,860 --> 00:01:25,830
LoggingProxy, which transparently proxies

32
00:01:25,830 --> 00:01:28,489
an object, including its repr or other

33
00:01:28,489 --> 00:01:31,282
special methods, it's up to you to provide

34
00:01:31,282 --> 00:01:33,980
an implementation of dunder repr that

35
00:01:33,980 --> 00:01:36,403
forwards the call appropriately. Here is

36
00:01:36,403 --> 00:01:38,588
such a forwarding version of dunder repr.

37
00:01:38,588 --> 00:01:41,868
It works by using dunder getattribute on

38
00:01:41,868 --> 00:01:44,728
the object base class to retrieve the

39
00:01:44,728 --> 00:01:46,539
target object, and then using getattr on

40
00:01:46,539 --> 00:01:49,977
the target object to retrieve the dunder

41
00:01:49,977 --> 00:01:54,037
repr method, which we then call. This now

42
00:01:54,037 --> 00:01:55,986
works when called by the repr function,

43
00:01:55,986 --> 00:01:59,821
although our proxy has become fairly

44
00:01:59,821 --> 00:02:05,000
invisible at this point, which may hinder debugging.

