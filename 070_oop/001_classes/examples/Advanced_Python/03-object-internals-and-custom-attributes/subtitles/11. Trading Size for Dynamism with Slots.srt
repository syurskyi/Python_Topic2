1
00:00:01,983 --> 00:00:03,542
We'll finish off this part of the course

2
00:00:03,542 --> 00:00:06,625
with a brief look at a mechanism in Python

3
00:00:06,625 --> 00:00:10,849
for reducing memory use, slots. As we have

4
00:00:10,849 --> 00:00:13,264
seen, each and every object stores it's

5
00:00:13,264 --> 00:00:15,234
attributes in dictionary. Even an empty

6
00:00:15,234 --> 00:00:17,416
Python dictionary is quite a hefty object

7
00:00:17,416 --> 00:00:20,919
weighing in at 288 bytes. Here we create

8
00:00:20,919 --> 00:00:24,513
an empty dictionary and use the getsizeof

9
00:00:24,513 --> 00:00:26,947
function from the sys module to measure

10
00:00:26,947 --> 00:00:29,182
its size. If you have thousands or

11
00:00:29,182 --> 00:00:31,338
millions of objects this quickly adds up,

12
00:00:31,338 --> 00:00:34,416
causing your programs to need megabytes or

13
00:00:34,416 --> 00:00:36,486
gigabytes of memory. Given contemporary

14
00:00:36,486 --> 00:00:38,739
computer architectures, this tends to lead

15
00:00:38,739 --> 00:00:42,410
to reduced performance, as CPU caches can

16
00:00:42,410 --> 00:00:45,210
hold relatively few objects. Techniques to

17
00:00:45,210 --> 00:00:47,319
solve the higher memory usage of Python

18
00:00:47,319 --> 00:00:49,403
programs can get pretty involved, such as

19
00:00:49,403 --> 00:00:51,172
implementing Python objects in a lower

20
00:00:51,172 --> 00:00:54,380
level language, such as C or C++, but

21
00:00:54,380 --> 00:00:56,461
fortunately Python provides the slots

22
00:00:56,461 --> 00:00:59,117
mechanism, which can provide some big wins

23
00:00:59,117 --> 00:01:02,477
for low effort with tradeoffs that will be

24
00:01:02,477 --> 00:01:05,257
acceptable in most cases. Let's take a

25
00:01:05,257 --> 00:01:07,134
look. Consider the following class to

26
00:01:07,134 --> 00:01:09,446
describe the type of electronic component

27
00:01:09,446 --> 00:01:12,062
called a resistor. In our simple model

28
00:01:12,062 --> 00:01:14,345
resistors have a resistance in ohms, a

29
00:01:14,345 --> 00:01:16,866
tolerance in percent, and a power

30
00:01:16,866 --> 00:01:19,401
capability in watts. We simply store these

31
00:01:19,401 --> 00:01:21,631
as three instance attributes of the same

32
00:01:21,631 --> 00:01:23,926
name. It's difficult to determine the size

33
00:01:23,926 --> 00:01:26,436
in memory of Python objects, but with care

34
00:01:26,436 --> 00:01:28,738
we can use the getsizeof function in the

35
00:01:28,738 --> 00:01:30,939
sys module. To get the size of an instance

36
00:01:30,939 --> 00:01:32,797
of resistor we need to account for the

37
00:01:32,797 --> 00:01:35,724
size of the resistor object itself and the

38
00:01:35,724 --> 00:01:38,999
size of its dict. Here we create a 10 ohm

39
00:01:38,999 --> 00:01:41,112
resistor, r10, with a resistance of 10

40
00:01:41,112 --> 00:01:47,055
ohms, a tolerance of 5%, and a power of 0.

41
00:01:47,055 --> 00:01:52,763
25 of a watt. Its size weighs in at 152

42
00:01:52,763 --> 00:01:55,431
bytes. Python objects being highly

43
00:01:55,431 --> 00:01:57,237
dynamic, dictionary-based objects we can

44
00:01:57,237 --> 00:02:00,273
add attributes to them at runtime and see

45
00:02:00,273 --> 00:02:03,552
if this is reflected as an increased size.

46
00:02:03,552 --> 00:02:07,886
Let's add a cost attribute to r10 of $0.

47
00:02:07,886 --> 00:02:11,650
02. Now its size has shot up to 248 bytes.

48
00:02:11,650 --> 00:02:14,156
This is quite a big object, especially

49
00:02:14,156 --> 00:02:16,061
when you consider that the equivalent

50
00:02:16,061 --> 00:02:18,260
struct in the C programming language would

51
00:02:18,260 --> 00:02:21,047
weigh in at no more than 64 bytes with

52
00:02:21,047 --> 00:02:22,998
very generous precision on the number

53
00:02:22,998 --> 00:02:26,242
types. Let's see if we can improve on this

54
00:02:26,242 --> 00:02:30,027
using slots. To use slots we must declare

55
00:02:30,027 --> 00:02:33,038
a class attribute called dunder slots. To

56
00:02:33,038 --> 00:02:35,823
dunder slots we assign a list containing

57
00:02:35,823 --> 00:02:38,434
the strings, resistance_ohms,

58
00:02:38,434 --> 00:02:42,049
tolerance_percent, and power_watts. Now

59
00:02:42,049 --> 00:02:44,414
look at the space performance of this new

60
00:02:44,414 --> 00:02:47,040
class. We can instantiate resistor, just

61
00:02:47,040 --> 00:02:50,415
as before, and retrieve its attributes in

62
00:02:50,415 --> 00:02:54,591
exactly the same way; however, its size is

63
00:02:54,591 --> 00:02:58,551
much reduced from 152 bytes down to 64

64
00:02:58,551 --> 00:03:01,766
bytes, less than half the size. There's

65
00:03:01,766 --> 00:03:04,167
always a tradeoff though, as we can no

66
00:03:04,167 --> 00:03:05,920
longer dynamically add attributes to

67
00:03:05,920 --> 00:03:08,903
instances of resistor. This is because the

68
00:03:08,903 --> 00:03:11,875
internal structure of resistor no longer

69
00:03:11,875 --> 00:03:14,594
contains a dunder dict. For most

70
00:03:14,594 --> 00:03:16,639
applications slots won't be required, and

71
00:03:16,639 --> 00:03:18,489
you shouldn't use them unless measurements

72
00:03:18,489 --> 00:03:20,693
indicate that they may help, as slots can

73
00:03:20,693 --> 00:03:23,354
interact with other Python features and

74
00:03:23,354 --> 00:03:26,269
diagnostic tools in surprising ways. In an

75
00:03:26,269 --> 00:03:28,362
ideal world slots wouldn't be necessary,

76
00:03:28,362 --> 00:03:31,259
and in our view they're quite an ugly

77
00:03:31,259 --> 00:03:33,949
language feature, but at the same time,

78
00:03:33,949 --> 00:03:35,844
we've worked on applications where the

79
00:03:35,844 --> 00:03:37,331
simple addition of a dunder slots

80
00:03:37,331 --> 00:03:38,964
attribute has made the difference between

81
00:03:38,964 --> 00:03:40,955
the pleasure of programming in Python and

82
00:03:40,955 --> 00:03:43,406
the pain of programming in a lower level,

83
00:03:43,406 --> 00:03:48,000
but more efficient language. Use slots wisely.

