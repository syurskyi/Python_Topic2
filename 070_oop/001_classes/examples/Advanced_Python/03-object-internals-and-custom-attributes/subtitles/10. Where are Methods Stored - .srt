1
00:00:01,451 --> 00:00:04,650
One question you may have is, where are

2
00:00:04,650 --> 00:00:07,034
the methods? Why is it that when we

3
00:00:07,034 --> 00:00:09,147
introspect the dunder dict of an object we

4
00:00:09,147 --> 00:00:11,283
only see attributes and not methods, but

5
00:00:11,283 --> 00:00:14,442
as we have just seen with dunder repr, we

6
00:00:14,442 --> 00:00:17,368
can retrieve methods using getattr, so

7
00:00:17,368 --> 00:00:20,475
where are the methods? The answer is that

8
00:00:20,475 --> 00:00:22,210
the methods are attributes of another

9
00:00:22,210 --> 00:00:25,202
object, the class object associated with

10
00:00:25,202 --> 00:00:27,855
our instance. As we already know, we can

11
00:00:27,855 --> 00:00:29,952
get to the class object via the dunder

12
00:00:29,952 --> 00:00:32,940
class attribute, and show enough it has a

13
00:00:32,940 --> 00:00:34,957
dunder dict attribute, which contains

14
00:00:34,957 --> 00:00:37,827
references to the callable objects, which

15
00:00:37,827 --> 00:00:42,211
are the manifestations of the methods of

16
00:00:42,211 --> 00:00:45,052
our class. Returning briefly to our vector

17
00:00:45,052 --> 00:00:47,524
example, we create a vector, v, with

18
00:00:47,524 --> 00:00:51,487
Vector components x=3 and y=7. When we

19
00:00:51,487 --> 00:00:56,567
retrieve its dunder dict we see _y and _x

20
00:00:56,567 --> 00:00:59,946
are private attributes. When we retrieve

21
00:00:59,946 --> 00:01:04,641
v. dunder class we see the type of the

22
00:01:04,641 --> 00:01:07,754
vector object, Vector. We can in turn

23
00:01:07,754 --> 00:01:10,127
retrieve the dunder dict from dunder

24
00:01:10,127 --> 00:01:12,301
class. This is an object of type

25
00:01:12,301 --> 00:01:14,079
mappingproxy. Of course, we can retrieve

26
00:01:14,079 --> 00:01:15,915
the callable object and pass that instance

27
00:01:15,915 --> 00:01:19,478
to it taking the place of what is normally

28
00:01:19,478 --> 00:01:23,353
the self-argument to a method. It's well

29
00:01:23,353 --> 00:01:25,034
worth spending some time experimenting on

30
00:01:25,034 --> 00:01:26,871
your own and poking around with these

31
00:01:26,871 --> 00:01:28,864
special attributes to get a good sense of

32
00:01:28,864 --> 00:01:33,666
how the Python object model hangs

33
00:01:33,666 --> 00:01:36,063
together. It's worth noting that the

34
00:01:36,063 --> 00:01:38,619
dunder dict attribute of a class object is

35
00:01:38,619 --> 00:01:42,165
not a regular dict, but is instead of type

36
00:01:42,165 --> 00:01:44,480
mappingproxy, a special mapping type used

37
00:01:44,480 --> 00:01:46,785
internally in Python, which does not

38
00:01:46,785 --> 00:01:48,888
support item assignment. To add an

39
00:01:48,888 --> 00:01:51,740
attribute to a class you must use the

40
00:01:51,740 --> 00:01:54,133
setattr function. The machinery of setattr

41
00:01:54,133 --> 00:02:03,000
knows how to insert attributes into the class dictionary.

