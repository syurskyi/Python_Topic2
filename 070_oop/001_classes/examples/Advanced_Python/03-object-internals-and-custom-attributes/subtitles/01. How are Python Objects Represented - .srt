1
00:00:01,459 --> 00:00:04,129
Let's start with a simple class to

2
00:00:04,129 --> 00:00:05,720
represent two-dimensional vectors called

3
00:00:05,720 --> 00:00:08,404
simply, vector. This has an initializer,

4
00:00:08,404 --> 00:00:11,161
which accepts the two components of the

5
00:00:11,161 --> 00:00:14,064
vector, x and y, and these are stored on

6
00:00:14,064 --> 00:00:18,101
two instance attributes also called x and

7
00:00:18,101 --> 00:00:20,441
y. We also include a dunder wrapper, so

8
00:00:20,441 --> 00:00:22,763
that we can print a nice textural

9
00:00:22,763 --> 00:00:26,994
representation of our vector objects.

10
00:00:26,994 --> 00:00:30,003
Let's instantiate an object of this class

11
00:00:30,003 --> 00:00:33,536
in the REPL with components 5 and 3. In

12
00:00:33,536 --> 00:00:35,958
the list returned by the built-in dir

13
00:00:35,958 --> 00:00:38,491
function we see two named attributes, x

14
00:00:38,491 --> 00:00:41,556
and y, along with many of Python's special

15
00:00:41,556 --> 00:00:44,054
dunder attributes, quite a few of which

16
00:00:44,054 --> 00:00:45,817
we've explained previously in Python

17
00:00:45,817 --> 00:00:50,267
Fundamentals of Python Beyond the Basics.

18
00:00:50,267 --> 00:00:52,548
One attribute in particular is of interest

19
00:00:52,548 --> 00:00:55,155
to us today, and that is dunder dict.

20
00:00:55,155 --> 00:00:58,563
Let's see what this is. As its name

21
00:00:58,563 --> 00:01:01,038
indicates, dunder dict is indeed a

22
00:01:01,038 --> 00:01:03,110
dictionary, one which contains the names

23
00:01:03,110 --> 00:01:06,434
of our objects attributes as keys, and the

24
00:01:06,434 --> 00:01:09,834
values of our objects attributes as, well,

25
00:01:09,834 --> 00:01:12,567
values. Here's further proof, if any were

26
00:01:12,567 --> 00:01:15,188
needed, that dunder dict is a Python

27
00:01:15,188 --> 00:01:18,765
dictionary. We can retrieve the type of v.

28
00:01:18,765 --> 00:01:21,749
dunder dict, which is dict. We can

29
00:01:21,749 --> 00:01:23,490
retrieve attribute values directly from

30
00:01:23,490 --> 00:01:25,490
dunder dict by indexing into the

31
00:01:25,490 --> 00:01:27,311
dictionary with square brackets, just like

32
00:01:27,311 --> 00:01:31,951
a normal dictionary because it is a normal

33
00:01:31,951 --> 00:01:36,424
dictionary. We can even modify attribute

34
00:01:36,424 --> 00:01:41,144
values through dunder dict. Going further,

35
00:01:41,144 --> 00:01:46,472
we can even remove attributes entirely. As

36
00:01:46,472 --> 00:01:49,087
you might by now suspect, we can also test

37
00:01:49,087 --> 00:01:52,655
for their existence using the in operator,

38
00:01:52,655 --> 00:01:56,701
and add new attributes into the

39
00:01:56,701 --> 00:01:59,506
dictionary, and thereby into our object.

40
00:01:59,506 --> 00:02:02,490
Although all of these direct queries and

41
00:02:02,490 --> 00:02:04,364
manipulations of dunder dict are possible,

42
00:02:04,364 --> 00:02:08,875
for the most part, you should prefer to

43
00:02:08,875 --> 00:02:12,953
use the built-in functions getattr,

44
00:02:12,953 --> 00:02:17,523
hasattr, delattr, and setattr. Direct

45
00:02:17,523 --> 00:02:23,424
access to dunder dict does have legitimate

46
00:02:23,424 --> 00:02:25,306
uses though, and it's essential to be

47
00:02:25,306 --> 00:02:28,965
aware of it's existence and how and when

48
00:02:28,965 --> 00:02:32,959
to use it for advanced Python programming.

49
00:02:32,959 --> 00:02:35,082
Our vector class, like most vector

50
00:02:35,082 --> 00:02:37,209
classes, has hard wired attributes called

51
00:02:37,209 --> 00:02:40,785
x and y to store the two components of the

52
00:02:40,785 --> 00:02:42,527
vector. Many problems, though, require us

53
00:02:42,527 --> 00:02:44,187
to deal with vectors in different

54
00:02:44,187 --> 00:02:47,173
coordinate systems within the same code or

55
00:02:47,173 --> 00:02:49,688
perhaps it's just convenient to use a

56
00:02:49,688 --> 00:02:52,159
different labeling scheme, such as u and v

57
00:02:52,159 --> 00:02:55,815
instead of x and y in a particular

58
00:02:55,815 --> 00:02:59,640
context. Let's see what we can come up

59
00:02:59,640 --> 00:03:02,700
with. In this code we accept a double star

60
00:03:02,700 --> 00:03:04,555
keywords args argument, which is received

61
00:03:04,555 --> 00:03:06,626
into the coords dictionary, which we will

62
00:03:06,626 --> 00:03:09,613
then use to update the entries in dunder

63
00:03:09,613 --> 00:03:11,608
dict. Remember that dictionaries are

64
00:03:11,608 --> 00:03:13,931
unordered, so there's no way to ensure

65
00:03:13,931 --> 00:03:16,502
that the coordinates are stored in the

66
00:03:16,502 --> 00:03:19,236
order they are specified as actual

67
00:03:19,236 --> 00:03:21,278
function arguments. Our dunder repr

68
00:03:21,278 --> 00:03:23,163
implementation must iterate over the

69
00:03:23,163 --> 00:03:25,522
dictionary, sorting by key for

70
00:03:25,522 --> 00:03:27,999
convenience. Our modified vector class

71
00:03:27,999 --> 00:03:30,807
allows us to provide arbitrary coordinate

72
00:03:30,807 --> 00:03:35,351
names. Here we set p to three and q to

73
00:03:35,351 --> 00:03:38,284
seven. This is all very well, but our

74
00:03:38,284 --> 00:03:40,054
coordinates are now essentially public

75
00:03:40,054 --> 00:03:42,712
attributes of our vector objects. What if

76
00:03:42,712 --> 00:03:45,728
we want our vector class to be an

77
00:03:45,728 --> 00:03:48,310
immutable value type, so we provide values

78
00:03:48,310 --> 00:03:50,644
to the constructor, which can't be

79
00:03:50,644 --> 00:03:52,689
subsequently changed? Ordinarily we will

80
00:03:52,689 --> 00:03:55,058
do this by prefixing our attributes with

81
00:03:55,058 --> 00:03:57,056
an underscore to signal that they are

82
00:03:57,056 --> 00:03:59,646
implementation details, and then provide a

83
00:03:59,646 --> 00:04:02,494
property with only a getter to prevent

84
00:04:02,494 --> 00:04:04,561
modification. In this case, though, we

85
00:04:04,561 --> 00:04:06,842
don't know the attribute names in advance,

86
00:04:06,842 --> 00:04:09,025
so we can't declare a property getter,

87
00:04:09,025 --> 00:04:12,655
which must be named at class definition

88
00:04:12,655 --> 00:04:15,767
time, not at object instantiation time.

89
00:04:15,767 --> 00:04:18,490
We'll show how to work around this using

90
00:04:18,490 --> 00:04:20,524
the special dunder getattr method, but

91
00:04:20,524 --> 00:04:22,878
first let's change our dunder init method

92
00:04:22,878 --> 00:04:25,619
to store data in private attributes and

93
00:04:25,619 --> 00:04:28,877
add dunder repr to report them correctly.

94
00:04:28,877 --> 00:04:31,466
In this version of the code we use a

95
00:04:31,466 --> 00:04:33,249
dictionary comprehension to associate new

96
00:04:33,249 --> 00:04:36,468
names with a prefix underscore with each

97
00:04:36,468 --> 00:04:39,971
existing value and assign this to a new

98
00:04:39,971 --> 00:04:42,173
dictionary called private_coords. This is

99
00:04:42,173 --> 00:04:46,044
what we then use to update dunder dict. In

100
00:04:46,044 --> 00:04:47,849
the dunder repr code we must remember to

101
00:04:47,849 --> 00:04:49,320
strip the leading underscore when

102
00:04:49,320 --> 00:04:51,306
displaying the representation, in this

103
00:04:51,306 --> 00:04:54,948
case, by using string slicing to emit the

104
00:04:54,948 --> 00:04:57,451
first character. We can construct and

105
00:04:57,451 --> 00:04:59,814
represent vector instances just as before.

106
00:04:59,814 --> 00:05:03,527
Here we use p=9 and q=3, but now the

107
00:05:03,527 --> 00:05:05,590
attributes are stored in private

108
00:05:05,590 --> 00:05:09,049
attributes called _p and _q. Because of

109
00:05:09,049 --> 00:05:13,014
this we can no longer access Python

110
00:05:13,014 --> 00:05:21,000
directly. It doesn't exist as an attribute.

