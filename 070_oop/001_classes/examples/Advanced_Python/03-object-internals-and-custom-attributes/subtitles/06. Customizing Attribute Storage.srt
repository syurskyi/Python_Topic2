1
00:00:01,576 --> 00:00:05,242
There is no requirement for us to store

2
00:00:05,242 --> 00:00:07,868
attributes directly in dunder dict. Here's

3
00:00:07,868 --> 00:00:10,538
an example of a subclass of vector called

4
00:00:10,538 --> 00:00:12,834
ColoredVector that stores immutable red,

5
00:00:12,834 --> 00:00:16,635
green, blue color along with the immutable

6
00:00:16,635 --> 00:00:18,801
vector components. Internally we store the

7
00:00:18,801 --> 00:00:21,050
red, green, blue channels in a list, which

8
00:00:21,050 --> 00:00:23,570
is assigned to the attribute called color.

9
00:00:23,570 --> 00:00:27,046
We override both dunder getattr and dunder

10
00:00:27,046 --> 00:00:29,903
setattr to provide read and write access

11
00:00:29,903 --> 00:00:31,934
to the color channels, being careful to

12
00:00:31,934 --> 00:00:36,636
forward requests to the super class when

13
00:00:36,636 --> 00:00:39,451
necessary. Here we create a ColoredVector

14
00:00:39,451 --> 00:00:42,722
called cv with color components red, 23,

15
00:00:42,722 --> 00:00:47,364
green, 44, blue, 238, and special

16
00:00:47,364 --> 00:00:51,522
components p=9, and q=14. Our code allows

17
00:00:51,522 --> 00:00:53,649
us to retrieve these attributes, red,

18
00:00:53,649 --> 00:00:56,778
green, p, and q as if they were just

19
00:00:56,778 --> 00:00:58,506
regular attributes, although the storage

20
00:00:58,506 --> 00:01:01,877
mechanisms for the vector components and

21
00:01:01,877 --> 00:01:05,249
the color components are quite different.

22
00:01:05,249 --> 00:01:09,532
When we do dir(cv) we see _p and _q for

23
00:01:09,532 --> 00:01:14,082
the vector components, and color for the

24
00:01:14,082 --> 00:01:16,704
color components. There's a gremlin

25
00:01:16,704 --> 00:01:18,683
lurking here though. Our dunder repr

26
00:01:18,683 --> 00:01:20,621
implementation in the base class makes an

27
00:01:20,621 --> 00:01:22,709
assumption, which is no longer valid. It

28
00:01:22,709 --> 00:01:25,579
assumes all attributes are prefixed with

29
00:01:25,579 --> 00:01:27,790
an underscore internally, and doesn't know

30
00:01:27,790 --> 00:01:29,599
about color. This causes our dunder repr

31
00:01:29,599 --> 00:01:32,620
to behave in unexpected ways. This is

32
00:01:32,620 --> 00:01:35,532
surprisingly hard to fit elegantly without

33
00:01:35,532 --> 00:01:37,575
the derived ColoredVector class knowing

34
00:01:37,575 --> 00:01:40,051
too much about implementation details of

35
00:01:40,051 --> 00:01:42,392
the vector base class. We believe it

36
00:01:42,392 --> 00:01:44,182
should be possible to derive from a class

37
00:01:44,182 --> 00:01:46,432
without knowing how it works. The base

38
00:01:46,432 --> 00:01:48,440
class dunder repr makes assumptions about

39
00:01:48,440 --> 00:01:51,004
the contents of its dunder dict, which it

40
00:01:51,004 --> 00:01:53,294
cannot reasonably expect to be respected

41
00:01:53,294 --> 00:01:55,687
by subclasses. As an exercise, we

42
00:01:55,687 --> 00:01:57,682
recommend changing vector, so it stores

43
00:01:57,682 --> 00:01:59,801
it's components in a dedicated dictionary

44
00:01:59,801 --> 00:02:02,168
separate from dunder dict, although of

45
00:02:02,168 --> 00:02:04,293
course, this dictionary itself will need

46
00:02:04,293 --> 00:02:06,758
to be stored in dunder dict. Here's

47
00:02:06,758 --> 00:02:09,468
another fix which works by duplicating and

48
00:02:09,468 --> 00:02:12,182
modifying some of the logic in the base

49
00:02:12,182 --> 00:02:14,356
class into an override of dunder repr.

50
00:02:14,356 --> 00:02:16,768
This method override works by removing the

51
00:02:16,768 --> 00:02:19,010
attribute named color from the list of

52
00:02:19,010 --> 00:02:21,315
keys before using the same logic as the

53
00:02:21,315 --> 00:02:24,010
super class to produce the string of

54
00:02:24,010 --> 00:02:25,768
sorted coordinates. The color channel

55
00:02:25,768 --> 00:02:27,733
values are accessed in the normal way,

56
00:02:27,733 --> 00:02:31,556
which will invoke dunder getattr. It's

57
00:02:31,556 --> 00:02:33,432
worth bearing in mind that this example

58
00:02:33,432 --> 00:02:35,177
demonstrates the awkwardness of inheriting

59
00:02:35,177 --> 00:02:37,596
from classes, which were not deliberately

60
00:02:37,596 --> 00:02:40,292
designed as base classes. Our code serves

61
00:02:40,292 --> 00:02:42,344
its purpose in demonstrating customized

62
00:02:42,344 --> 00:02:44,585
attribute access, but we couldn't

63
00:02:44,585 --> 00:02:51,000
recommend such a use of inheritance in production code.

