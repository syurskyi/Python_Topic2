# # -*- coding: utf-8 -*-
#
# # Так как классы тоже являются объектами, то помимо атрибутов-функций
# # они могут иметь и собственные методы. Для создания методов класса
# # используется декоратор classmethod. В таких методах первый параметр
# # принято называть не ____, а cls.
# #
# # Методы класса обычно используются в двух случаях:
# # •	для создания фабричных методов, которые создают
# #   экземпляры данного класса альтернативными способами;
# # •	статические методы, вызывающие статические методы:
# #   поскольку данный класс передаётся как первый аргумент функции,
# #   не нужно вручную указывать имя класса для вызова статического метода.
#
#
# c_ Rectangle
#     """
#     Класс, описывающий прямоугольник
#     """
#
#     ___  - ____ side_a side_b
#         """
#         Конструктор класса
#         :param side_a: первая сторона
#         :param side_b: вторая сторона
#         """
#         ____.?  ?
#         ____.?  ?
#
#     ___ -r ____
#         """
#         Метод, который возвращает строковое представление объекта
#         """
#         r_ 'Rectangle(/.1_, /.1_)' / ____._a ____._b
#
#
# c_ Circle
#     """
#     Класс, описывающий окружность
#     """
#
#     ___ - ____ radius
#         ____.?  ?
#
#     ___ -r ____
#         r_ 'Circle(/.1_)' / ____.r..
#
#     ??
#     ___ from_rectangle ___ rectangle
#         """
#         Мы используем метод класса в качестве фабричного метода,
#         который создаёт экземпляр класса Circle из экземпляра
#         класса Rectangle как окружность, вписанную в данный
#         прямоугольник.
#
#         :param rectangle: Rectangle instance
#         :return: Circle instance
#         """
#         radius = (?._a ** 2 + ?._b ** 2) ** 0.5 / 2
#         r_ ___ ?
#
#
# ___ main
#     rectangle = R_ 3 4
#     print ?
#     circle1 = C_ 1
#     print ?
#     circle2 = C__.f...  r...
#     print ?
#
#
# __ ______ __ ______
#     ?
