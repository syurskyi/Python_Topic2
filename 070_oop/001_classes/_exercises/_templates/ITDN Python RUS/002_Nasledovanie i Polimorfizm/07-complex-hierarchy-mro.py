# # -*- coding: utf-8 -*-
#
#
# """
# Ещё один пример использования super и построения интерпретатором линеаризации.
# Иерархия классов в данном примере:
#             object
#             /    \
#            /      \
#           A        B
#           \       /|
#            \     / |
#             \   /  |
#              \ /   |
#               C    |
#               \    |
#                \   |
#                 \  |
#                  \ |
#                   \|
#                    D
#                    |
#                    E
# """
#
#
#
# ___ gen_init ___
#     """
#     Декоратор gen_init, который добавляет автоматически
#     сгенерированный конструктор.
#     Декоратор -- это функция, которая принимает функцию или класс
#     и возвращает другой объект, который будет привязан к имени изначального.
#     Обычно используется для изменения поведения фукнции (путём создания
#     новой функции, которая вызывает изначальную) или модификации класса
#     (и происходит в данном примере).
#
#     :param cls: модифицируемый класс
#     :return:    класс с добавленным конструктором
#     """
#
#     ___ init ____
#         print('Entered' ___. -n  "constructor")
#         s... ___ ____. -
#         print('Quit', ___. -n "constructor")
#     ___. - _ init
#     r_ ___
#
#
# 0?
# c__ A o..
#     p___
#
#
# 0?
# c_ B o..
#     p___
#
#
# 0?
# c_ C A B
#     p_
#
#
# 0?
# c_ D C B
#     p_
#
#
# 0?
# c_ E D
#     p_
#
#
# print E. -m
# obj _ E