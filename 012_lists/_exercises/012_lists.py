# Создаем список


# Создаем пустой список


# Получаем элемент по индексу
# Изменяем элемент по индексу
arr = [1, 2, 3]

# Изменяем элемент по индексу

# Преобразуем кортеж в список

# Создаем пустой список, Добавляем элемент1, Добавляем элемент2

# Создавать вложенные списки следует с помощью метода append ( ) внутри цикла:
# Можно также воспользоваться генераторами списков:

# Create a shallow copy of the list
x = [1, 2, 3, 4, 5]
# #  Создаем копию списка

# # или с помощью среза

# Создаем вложенный список
x = [1, [2, 3, 4, 5]]
# # Создаем копию списка

# # Разные объекты

# # Изменяем элемент

# # Изменение затронуло переменную x!!!

# Create a full copy of the list
x = [1, [2, 3, 4, 5]]

# #  create deep copy y

# #  change element

# #  print

# # second example
x = [1, 2]
y = [x, x]

# # #  create deep copy z

# # # Изменили один элемент

# # # Значение изменилось сразу в двух элементах!

# # # Начальный список не изменился

# Позиционное присваивание
x, y, z = [1, 2, 3]

# В Python 3 при позиционном присваивании перед одной из переменных слева от оператора
# = можно указать звездочку.

x, y, *z = None
# (1, 2, [3])
x, y, *z = None
# (1, 2, [3, 4, 5])
x, y, *z = None
# (1, 2, [])
*x, y, z = None
# ([], 1, 2)

# Получаем количество элементов
arr = [1, 2, 3, 4, 5]

# Получаем последний элемент
arr = [1, 2, 3, 4, 5]

# Обращение к последнему элементу
arr = [1, 2, 3, 4, 5]

# Изменение элемента по индексу
arr = [1, 2, 3, 4, 5]

# выведем символы в обратном порядке
arr = [1, 2, 3, 4, 5]

# выведем символы Без первого элемента
arr = [1, 2, 3, 4, 5]

# выведем символы Без последнего элемента
arr = [1, 2, 3, 4, 5]

# Получим первые два элемента списка
arr = [1, 2, 3, 4, 5]

# Последний элемент списка
arr = [1, 2, 3, 4, 5]

# выведем фрагмент от второго элемента до четвертого включительно:
arr = [1, 2, 3, 4, 5]

# Изменяем значения элементов с индексами 1 и 2
arr = [1, 2, 3, 4, 5]

# Удаляем элементы с индексами 1 и 2
arr = [1, 2, 3, 4, 5]

# два списка в один список позволяет оператор+
arr1 = [1, 2, 3, 4, 5]
arr2 = [6, 7, 8, 9]

# Операция повторения

# Проверка на вхождение

# Создать вложенный cписок

# получить значение элемента во вложенном списке
arr = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]

# Перебрать все элементы списка можно с помощью цикла for:
arr = [1, 2, 3, 4, 5]

# переmенную i внутри цикла можно изменить, но если она ссылается
# на неизменяемый тип данных (например, число или строку), то это не отразится на исходном списке:
arr = [1, 2, 3, 4]
# # # Элементы имеют неизменяемый тип (число)

# # # ## Список не изменился

# # # # Элементы имеют изменяемый тип (список)
arr = [[1, 2], [3, 4]]

# # # ## # # Список изменился


# append()
arr = [1, 2, 3]
# # # # Добавляем число

# # # # Добавляем список

# # # # Добавляем кортеж


# ехtеnd()
arr = [1, 2, 3]
# # # # Добавляем список

# # # # Добавляем кортеж

# # # # Добавляем буквы из строки


# Добавить несколько элементов можно с помощью операции конкатенации или оператора+=:
arr = [1, 2, 3]

# воспользоваться операцией присваивания значения срезу:
arr = [1, 2, 3]

# insert()
arr = [1, 2, 3]
# # # Вставляем 0 в начало списка

# # # Можно указать отрицательные числа

# # # Вставляем 100 в позицию 2

# # # Добавляем список

# Метод insert () позволяет добавить только один объект. Чтобы добавить несколько объектов,
# можно воспользоваться операцией присваивания значения срезу. Добавим несколько
# элементов в начало списка:
arr = [1, 2, 3]

# рор ( [ <Индекс> ] )
arr = [1, 2, 3, 4, 5]
# # # Удаляем последний элемент списка

# # # Список изменился

# # # Удаляем первый элемент списка

# # # Список изменился

# del()
arr = [1, 2, 3, 4, 5]
# # # Удаляем последний элемент спискa

# # # Удаляем первый и второй элементы

# remove (<Значение>)
arr = [1, 2, 3, 1, 1]

# clear ()
arr = [1, 2, 3, 1, 1]

# Если необходимо удалить все повторяюшиеся элементы списка, то можно преобразовать список во множество,
# а затем множество обратно преобразовать в список. Обратите внимание на то, что список должен содержать
# только неизменяемые объекты (например, числа, строки или кортежи).
# В противном случае возбуждается искmочение TypeError.
arr = [1, 2, 3, 1, 1, 2, 2, 3, 3]

# # # Преобразуем список во множество

# # # Преобразуем множество в список

# # # Все повторы были удалены

# Проверка на вхождение

# Проверка на невхождение

# index
arr = [1, 2, 1, 2, 1]

# count
arr = [1, 2, 1, 2, 1]

# max () и min ()
arr = [1, 2, 3, 4, 5]

# reverse()
arr = [1, 2, 3, 4, 5]

# rеvеrsеd()
arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
# # # Использование функции list()

# # # Вывод с помощью цикла

# # # Использование генератора списков


# shuffle
arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

# choice

# sample
arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

# sort( )
arr = [2, 7, 10, 4, 6, 8, 9, 3, 1, 5]

# Standard sorting
arr = ["единица1", "Единый", "Единица2"]

# Custom sorting,  # Указываем метод
arr = ["единица1", "Единый", "Единица2"]



# join()
arr = ["word1", "word2", "word3"]
arr = ["word1", "word2", "word3", 2]

# Index assignment
L = ['spam', 'Spam', 'SPAM!']

# Slice assignment: delete+insert
L = ['spam', 'Spam', 'SPAM!']

# Append method call: add item at end
L = ['spam', 'Spam', 'SPAM!']

# Sort list items
L = ['spam', 'Spam', 'SPAM!']


# Sort with mixed case
L = ['abc', 'ABD', 'aBe']

# sort() Normalize to lowercase
L = ['abc', 'ABD', 'aBe']

# sort() Change sort order
L = ['abc', 'ABD', 'aBe']

# Sorting built-in
L = ['abc', 'ABD', 'aBe']

# Add many items at end
L = [1, 2]

# Delete and return last item
L = [1, 2, 3, 4, 5]

# In-place reversal method
L = [1, 2, 3, 4, 5]

#  Index of an object
L = ['spam', 'eggs', 'ham']

# Insert at position
L = ['spam', 'eggs', 'ham']

# Delete by value
L = ['spam', 'eggs', 'ham']

# Delete by position
L = ['spam', 'eggs', 'ham']

# Delete one item
L = ['spam', 'eggs', 'ham']

# Delete an entire section
L = ['spam', 'eggs', 'ham']
L = ['Already', 'got', 'one']

# Получение предпоследнего значения
my_list = [5, 7, 9, 1, 1, 2]

# Вычисление суммы первого и последнего значений
my_list = [5, 7, 9, 1, 1, 2]

# Вывод элементов списка от второго до предпоследнего
my_list = [5, 7, 9, 1, 1, 2]

# Выбор каждого второго значения списка, не включая последний элемент
my_list = [5, 7, 9, 1, 1, 2]

# Вывод элементов списка от второго (третьего) до предпоследнего с шагом два
my_list = [5, 7, 9, 1, 1, 2]

# Вывод всех элементов списка, кроме первого, в обратном порядке
my_list = [1, 2, 3, 4, 5, 7, 8, 9]

# Вывод элементов списка от второго (третьего) значения до конца списка
my_list = [5, 7, 9, 1, 1, 2]

# Вывод всех элементов списка от начала до предпоследнего элемента
my_list = [5, 7, 9, 1, 1, 2]

# Вывод всех элементов списка в обратном порядке
my_list = [1, 2, 3, 4, 5, 7, 8, 9]