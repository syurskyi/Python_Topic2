# # -*- coding: utf-8 -*-
#
# ____ -f ______ a...
# ____ col__.a.. ______ Iterable, Iterator
# ____ ty.. ______ A.. L..
#
#
# """
# Для создания итератора в Python есть два абстрактных класса из встроенного
# модуля collections - Iterable, Iterator. Нужно реализовать метод __iter__() в
# итерируемом объекте (списке), а метод __next__() в итераторе.
# """
#
#
# c_ AlphabeticalOrderIterator I..
#     """
#     Конкретные Итераторы реализуют различные алгоритмы обхода. Эти классы
#     постоянно хранят текущее положение обхода.
#     """
#
#     """
#     Атрибут _position хранит текущее положение обхода. У итератора может быть
#     множество других полей для хранения состояния итерации, особенно когда он
#     должен работать с определённым типом коллекции.
#     """
#     _position: int _ N..
#
#     """
#     Этот атрибут указывает направление обхода.
#     """
#     _reverse: bool _ F..
#
#     ___ - collection W.. reverse bo.. _ F.. __ ?
#         _?  ?
#         _?  ?
#         _position _ -1 __ re.. ____ 0
#
#     ___ -n
#         """
#         Метод __next __() должен вернуть следующий элемент в последовательности.
#         При достижении конца коллекции и в последующих вызовах должно вызываться
#         исключение StopIteration.
#         """
#         ___
#             value _ _c..|_p...
#             _p.. +_ -1 if _r.. ____ 1
#         ______ I...
#             r_ S..
#
#         r_ ?
#
#
# c_ WordsCollection I..
#     """
#     Конкретные Коллекции предоставляют один или несколько методов для получения
#     новых экземпляров итератора, совместимых с классом коллекции.
#     """
#
#     ___ - collection L..|A.. _ ||| __ ?
#         _?  ?
#
#     ___ -i __ A...
#         """
#         Метод __iter__() возвращает объект итератора, по умолчанию мы возвращаем
#         итератор с сортировкой по возрастанию.
#         """
#         r_ A.. _c..
#
#     ___ get_reverse_iterator __ A..
#         r_ A.. _c.. T..
#
#     ___ add_item item A..
#         _c___.ap.. ?
#
#
# __ _______ __ ______
#     # Клиентский код может знать или не знать о Конкретном Итераторе или классах
#     # Коллекций, в зависимости от уровня косвенности, который вы хотите
#     # сохранить в своей программе.
#     collection _ W..
#     ?.a_i.. "First"
#     ?.a_i.. "Second"
#     ?.a_i.. "Third"
#
#     print("Straight traversal:")
#     print("\n".jo.. ?
#     print("")
#
#     print("Reverse traversal:")
#     print("\n".join(?.g_r_i.. e.._""
#
# # Straight traversal:
# # First
# # Second
# # Third
# #
# # Reverse traversal:
# # Third
# # Second
# # First