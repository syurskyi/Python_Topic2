# -*- coding: utf-8 -*-

# ____ -f ______ a..
# ____ ty.. ______ O..
#
#
# c_ SingletonMeta ty..
#     """
#     В Python класс Одиночка можно реализовать по-разному. Возможные способы
#     включают себя базовый класс, декоратор, метакласс. Мы воспользуемся
#     метаклассом, поскольку он лучше всего подходит для этой цели.
#     """
#
#     _instance O..|S.. _ N..
#
#     ___ -c __ S..
#         __ _? __ N..
#             _? _ s____. -c
#         r_ _?
#
#
# c_ Singleton m.._S..
#     ___ some_business_logic
#         """
#         Наконец, любой одиночка должен содержать некоторую бизнес-логику,
#         которая может быть выполнена на его экземпляре.
#         """
#
#         # ...
#
#
# __ ______ __ ______
#     # Клиентский код.
#
#     s1 = ?
#     s2 = ?
#
#     __ i. _1 __ i. _2
#         print("Singleton works, both variables contain the same instance.")
#     ____
#         print("Singleton failed, variables contain different instances.")
