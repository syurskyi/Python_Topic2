# # -*- coding: utf-8 -*-
#
# ____ a.. ______ A.. a..
#
#
# c_ Subject A..
#     """
#     Интерфейс Субъекта объявляет общие операции как для Реального Субъекта, так
#     и для Заместителя. Пока клиент работает с Реальным Субъектом, используя этот
#     интерфейс, вы сможете передать ему заместителя вместо реального субъекта.
#     """
#
#     ??
#     ___ request __ ?
#         p..
#
#
# c_ RealSubject S..
#     """
#     Реальный Субъект содержит некоторую базовую бизнес-логику. Как правило,
#     Реальные Субъекты способны выполнять некоторую полезную работу, которая к
#     тому же может быть очень медленной или точной – например, коррекция входных
#     данных. Заместитель может решить эти задачи без каких-либо изменений в коде
#     Реального Субъекта.
#     """
#
#     ___ request __ ?
#         print("RealSubject: Handling request.")
#
#
# c_ Proxy S..
#     """
#     Интерфейс Заместителя идентичен интерфейсу Реального Субъекта.
#     """
#
#     ___ - real_subject R.. __ ?
#         _?  ?
#
#     ___ request __ ?
#         """
#         Наиболее распространёнными областями применения паттерна Заместитель
#         являются ленивая загрузка, кэширование, контроль доступа, ведение
#         журнала и т.д. Заместитель может выполнить одну из этих задач, а затем,
#         в зависимости от результата, передать выполнение одноимённому методу в
#         связанном объекте класса Реального Субъекта.
#         """
#
#         __ check_access
#             _?.re..
#             l_a..
#
#     ___ check_access __ b..
#         print("Proxy: Checking access prior to firing a real request.")
#         r_ T..
#
#     ___ log_access __ ?
#         print("Proxy: Logging the time of request.", e.._"")
#
#
# ___ client_code subject S.. __ ?
#     """
#     Клиентский код должен работать со всеми объектами (как с реальными, так и
#     заместителями) через интерфейс Субъекта, чтобы поддерживать как реальные
#     субъекты, так и заместителей. В реальной жизни, однако, клиенты в основном
#     работают с реальными субъектами напрямую. В этом случае, для более простой
#     реализации паттерна, можно расширить заместителя из класса реального
#     субъекта.
#     """
#
#     # ...
#
#     ?.re..
#
#     # ...
#
#
# __ _______ __ ______
#     print("Client: Executing the client code with a real subject:")
#     real_subject = R..
#     c.. ?
#
#     print("")
#
#     print("Client: Executing the same client code with a proxy:")
#     proxy = P ?
#     c.. ?
#
# # Client: Executing the client code with a real subject:
# # RealSubject: Handling request.
# #
# # Client: Executing the same client code with a proxy:
# # Proxy: Checking access prior to firing a real request.
# # RealSubject: Handling request.
# # Proxy: Logging the time of request.