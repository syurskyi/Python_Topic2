# # -*- coding: utf-8 -*-
#
# ____ -f ______ a..
# ____ a.. ______ A.. a..
#
#
# c_ Abstraction
#     """
#     Абстракция устанавливает интерфейс для «управляющей» части двух иерархий
#     классов. Она содержит ссылку на объект из иерархии Реализации и делегирует
#     ему всю настоящую работу.
#     """
#
#     ___ - implementation I___ __ N..
#         ?  ?
#
#     ___ operation __ ?
#         r_ _*Abstraction: Base operation with:\n"
#                 _*|i___.o_i..")
#
#
# c_ ExtendedAbstraction(Abstraction):
#     """
#     Можно расширить Абстракцию без изменения классов Реализации.
#     """
#
#     ___ operation(self) __ ?
#         r_ _*ExtendedAbstraction: Extended operation with:\n"
#                 _*|.i___.o_i..")
#
#
# c_ Implementation A..
#     """
#     Реализация устанавливает интерфейс для всех классов реализации. Он не должен
#     соответствовать интерфейсу Абстракции. На практике оба интерфейса могут быть
#     совершенно разными. Как правило, интерфейс Реализации предоставляет только
#     примитивные операции, в то время как Абстракция определяет операции более
#     высокого уровня, основанные на этих примитивах.
#     """
#
#     ??
#     ___ operation_implementation __ ?
#         p..
#
#
# """
# Каждая Конкретная Реализация соответствует определённой платформе и реализует
# интерфейс Реализации с использованием API этой платформы.
# """
#
#
# c_ ConcreteImplementationA I___
#     ___ operation_implementation __ ?
#         r_ "ConcreteImplementationA: Here's the result on the platform A."
#
#
# c_ ConcreteImplementationB I___
#     ___ operation_implementation __ ?
#         r_ "ConcreteImplementationB: Here's the result on the platform B."
#
#
# ___ client_code abstraction Ab.. __ N..
#     """
#     За исключением этапа инициализации, когда объект Абстракции связывается с
#     определённым объектом Реализации, клиентский код должен зависеть только от
#     класса Абстракции. Таким образом, клиентский код может поддерживать любую
#     комбинацию абстракции и реализации.
#     """
#
#     # ...
#
#     print a___.op.. en._""
#
#     # ...
#
#
# __ ______ __ ______
#     """
#     Клиентский код должен работать с любой предварительно сконфигурированной
#     комбинацией абстракции и реализации.
#     """
#
#     implementation = C_A
#     abstraction = A.. ?
#     c_c. ?
#
#     print("\n")
#
#     implementation = C_B
#     abstraction = EA_ ?
#     c_c. ?