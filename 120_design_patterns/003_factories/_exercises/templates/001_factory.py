# ____ -f ______ a..
# ____ a.. ______ A.. a_m...
#
#
# c_ Creator A..
#     """
#     Класс Создатель объявляет фабричный метод, который должен возвращать объект
#     класса Продукт. Подклассы Создателя обычно предоставляют реализацию этого
#     метода.
#     """
#
#     ??
#     ___ factory_method
#         """
#         Обратите внимание, что Создатель может также обеспечить реализацию
#         фабричного метода по умолчанию.
#         """
#         pass
#
#     ___ some_operation __ st.
#         """
#         Также заметьте, что, несмотря на название, основная обязанность
#         Создателя не заключается в создании продуктов. Обычно он содержит
#         некоторую базовую бизнес-логику, которая основана на объектах Продуктов,
#         возвращаемых фабричным методом. Подклассы могут косвенно изменять эту
#         бизнес-логику, переопределяя фабричный метод и возвращая из него другой
#         тип продукта.
#         """
#
#         # Вызываем фабричный метод, чтобы получить объект-продукт.
#         product = ?f_m..
#
#         # Далее, работаем с этим продуктом.
#         result = _*Creator: The same creator's code has just worked with |?.o.. "
#
#         r_ ?
#
#
# """
# Конкретные Создатели переопределяют фабричный метод для того, чтобы изменить тип
# результирующего продукта.
# """
#
#
# c_ ConcreteCreator1 C..
#     """
#     Обратите внимание, что сигнатура метода по-прежнему использует тип
#     абстрактного продукта, хотя фактически из метода возвращается конкретный
#     продукт. Таким образом, Создатель может оставаться независимым от конкретных
#     классов продуктов.
#     """
#
#     ___ factory_method __ C_1
#         r_ C_1
#
#
# c_ ConcreteCreator2 C..
#     ___ factory_method __ C_2
#         r_ C_2
#
#
# c_ Product A..
#     """
#     Интерфейс Продукта объявляет операции, которые должны выполнять все
#     конкретные продукты.
#     """
#
#     ??
#     ___ operation __ st.
#         p..
#
#
# """
# Конкретные Продукты предоставляют различные реализации интерфейса Продукта.
# """
#
#
# c_ ConcreteProduct1 P..
#     ___ operation __ st.
#         r_ "{Result of the ConcreteProduct1}"
#
#
# c_ ConcreteProduct2 P..
#     ___ operation __ st.
#         r_ "{Result of the ConcreteProduct2}"
#
#
# ___ client_code creator C.. __ N..
#     """
#     Клиентский код работает с экземпляром конкретного создателя, хотя и через
#     его базовый интерфейс. Пока клиент продолжает работать с создателем через
#     базовый интерфейс, вы можете передать ему любой подкласс создателя.
#     """
#
#     print(_*Client: I'm not aware of the creator's class, but it still works.\n"
#           _*|c__.s_o.. ", en._"")
#
#
# __ _______ __ _____
#     print("App: Launched with the ConcreteCreator1.")
#     c_c.. C_1
#     print("\n")
#
#     print("App: Launched with the ConcreteCreator2.")
#     c_c.. (C_2