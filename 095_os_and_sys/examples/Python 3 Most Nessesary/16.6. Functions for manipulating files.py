# # -*- coding: utf-8 -*-
# copyf ile ( <Копируемый файл>, <Куда копируем>) - позволяет скопировать содержимое файла в другой файл.
# Никакие метаданные (например, права доступа) не копируются. Если файл существует, то он будет перезаписан.
# Если файл не удалось скопировать, возбуждается исключение OSError или одно из исключений, являющихся подклассом
# этого класса.Исключение1 FileNotFoundError является подклассом класса OSError и возбуждается, если указанный
# файл не найден.
# сору ( <Копируемый файл>, <Куда копируем>) - позволяет скопировать файл вместе с правами доступа.
# Если файл существует, то он будет перезаписан. Если файл не удалось скопировать, возбуждается исключение osError
# или одно из исключений, являющихся подклассом этого класса.
# Начиная с Python 3.3, функция сору () в качестве результата возвращает путь скопированного файла;
# сору2 ( <Копируемый файл>, <Куда копируем>) - позволяет скопировать файл вместе с метаданными. Если файл существует,
# то он будет перезаписан. Если файл не удалось скопировать, возбуждается исключение osError или одно из исключений,
# являющихся подклассом этого класса.
# Начиная с Python 3.3, функция сору2 () в качестве результата возвращает путь скопированного файла
# rename ( <Старое имя>, <Новое имя>) - переименовывает файл. Если файл не удалось переименовать,
# возбуждается исключение OSError или одно из исключений, являющихся подклассом этого класса.
# Пример переименования файла с обработкой исключений:
# remove (<Путь к файлу>) и unlink (<Путь к файлу>) - позволяют удалить файл. Если
# файл не удалось удалить, возбуждается исключение OSError или одно из исключений,
# являющихся подклассом этого класса.
# exists <<Путь>) - проверяет указанный путь на существование. Значением функции
# будет True, если путь существует, и False - в противном случае
# Начиная с Python 3.3, в качестве параметра можно передать целочисленный дескриптор
# открытого файла, возвращенный функцией open ( ) из того же модуля os;
# getsize (<Путь к файлу>) - возвращает размер файла в байтах. Если файл не существует,
# возбуждается исключение OSError:
# getatime ( <Путь к файлу>) - служит для определения времени последнего доступа к файлу.
# В качестве значения фунюmя возврашает количество секуН!l, прошедmи:х с начала эпохи.
# Если файл не существует, возбуждается иск..rпочение OSE:rror.
# getctime (<Путь к файлу>) - позволяет узнать дату создания файла. В качестве значения
# функция возвращает количество секунд, прошедших с начала эпохи. Если файл HF сушествует,
# возбуждается искточение OSError.
# getmtirne (<Путь к файлу>) - возвращает время последнего изменения файла.
# В качестве значения функция возвращает количество секунд, прошедших с начала эпохи. Если файл
# не существует, возбуждается искточение OSError .


import shutil      # Подключаем модуль
shutil.copyfile(r"file.txt", r"file2.txt")
# Путь не существует:
shutil.copyfile(r"file.txt", r"C:\book2\file2.txt")
# ... Фрагмент опущен ...
# F.. [Errno 2] No such file or directory:
# 'C:\\book2\\file2.txt'

shutil.copy(r"file.txt", r"file3.txt")

shutil.copy2(r"file.txt", r"file4.txt")

shutil.move(r"file4.txt", r"C:\book\test")


import os  # Подключаем модуль
try:
    os.rename(r"file3.txt", "file4.txt")
except OSError:
    print("Файл не удалось переименовать")
else:
    print("Файл успешно переименован")


os.remove(r"file2.txt")
os.unlink(r"file4.txt")

import os.path
os.path.exists(r"file.txt"), os.path.exists(r"file2.txt")
# (True, False)
os.path.exists(r"C:\book"), os.path.exists(r"C:\book2")
# (True, False)
# ######################################################################################################################

os.path.getsize(r"file.txt")  # Файл существует
# 18
os.path.getsize(r"file2.txt") # Файл не существует
# ... Фрагмент опущен ...
# OSError: [Error 2] Не удается найти указанный файл: 'file2.txt'
# ######################################################################################################################

import time    # Подключаем модуль time
t = os.path.getatime(r"file.txt")
t
# 1304111982.96875
time.strftime("%d.%m.%Y %H:%M:%S", time.localtime(t))
# '30.04.2011 01:19:42'
# ######################################################################################################################

t = os.path.getctime(r"file.txt")
t
# 1304028509.015625
time.strftime("%d.%m.%Y %H:%M:%S", time.localtime(t))
# '29.04.2011 02:08:29'
# ######################################################################################################################

t = os.path.getmtime(r"file.txt")
t
# 1304044731.265625
time.strftime("%d.%m.%Y %H:%M:%S", time.localtime(t))
# '29.04.2011 06:38:51'
# ######################################################################################################################