# dict.fromkeys(sequence[, value])
# создаёт новый словарь с
# ключами из последовательности sequence и заданным значением (по умолчанию –
# None).
#
numbers_dict = dict.fromkeys(range(3), 42)
print(numbers_dict)

# d.get(key[, default])
# безопасное получение значения по ключу (никогда не  выбрасывает KeyError).
# Если ключ не найден, возвращается значение default  (по-умолчанию – None).
#
for key in range(5):
    print('{}:'.format(key), numbers_dict.get(key, 0))

# d.items()
#  в Python 3 возвращает объект представления словаря, соответствующий парам (двухэлементным кортежам)
#  вида (ключ, значение).  В  Python 2 возвращает соответствующий список, а метод iteritems() возвращает итератор.
# Аналогичный метод в Python 2.7 – viewitems().
#
phonebook = {
    'Jack': '032-846',
    'Guido': '917-333',
    'Mario': '120-422',
    'Mary': '890-532',  # последняя запятая игнорируется
}

print('Items:', phonebook.items())

# d.keys()
# в Python 3 возвращает объект представления словаря, соответствующий ключам словаря.  В Python 2 возвращает соответствующий
# список, а метод iterkeys() возвращает итератор.  Аналогичный метод в Python
# 2.7 – viewkeys().
#
phonebook = {
    'Jack': '032-846',
    'Guido': '917-333',
    'Mario': '120-422',
    'Mary': '890-532',  # последняя запятая игнорируется
}

print('Keys:', phonebook.keys())

# d.values()
# в Python 3 возвращает объект представления словаря, соответствующий значениям.
# В Python 2 возвращает соответствующий список, а метод itervalues() возвращает итератор.
# Аналогичный метод в Python 2.7 –
# viewvalues().
#
phonebook = {
    'Jack': '032-846',
    'Guido': '917-333',
    'Mario': '120-422',
    'Mary': '890-532',  # последняя запятая игнорируется
}

print('Values:', phonebook.values())

# d.pop(key[, default])
# если ключ key существует, удаляет элемент из словаря и возвращает его значение.  Если ключ не существует и задано значение
# default, возвращается данное значение, иначе выбрасывается исключение KeyError.
#
phonebook = {
    'Jack': '032-846',
    'Guido': '917-333',
    'Mario': '120-422',
    'Mary': '890-532',  # последняя запятая игнорируется
}

number = phonebook.pop('Lumberjack')
print('Deleted Lumberjack (was ' + number + ')')
print(phonebook)

# d.popitem()
# удаляет произвольную пару ключ-значение и возвращает её.  Если словарь пустой, возникает исключение KeyError.
# Метод полезен для алгоритмов, которые обходят словарь, удаляя уже обработанные значения (например,
# определённые алгоритмы, связанные с теорией графов).
#
phonebook = {
    'Jack': '032-846',
    'Guido': '917-333',
    'Mario': '120-422',
    'Mary': '890-532',  # последняя запятая игнорируется
}

person = phonebook.popitem()
print('Popped {} (phone: {})'.format(*person))

# d.setdefault(key[, default])
#  если ключ key существует, возвращает
# соответствующее значение.  Иначе создаёт элемент с ключом key и значением default.  default по умолчанию равен None.
#
phonebook = {
    'Jack': '032-846',
    'Guido': '917-333',
    'Mario': '120-422',
    'Mary': '890-532',  # последняя запятая игнорируется
}

for person in ('Jack', 'Liz'):
    phone = phonebook.setdefault(person, '000-000')
    print('{}: {}'.format(person, phone))
print(phonebook)

# d.update(mapping)
# принимает либо другой словарь или отображение, либо итерабельный объект, состоящий из итерабельных объектов –
# пар ключ-значение, либо именованные аргументы.  Добавляет соответствующие элементы в словарь,
# перезаписывая элементы с существующими ключами.
#
phonebook = {
    'Jack': '032-846',
    'Guido': '917-333',
    'Mario': '120-422',
    'Mary': '890-532',  # последняя запятая игнорируется
}

phonebook.update({'Alex': '832-438', 'Alice': '231-987'})
phonebook.update([('Joe', '217-531'), ('James', '783-428')])
phonebook.update(Carl='783-923', Victoria='386-486')
print(phonebook)

