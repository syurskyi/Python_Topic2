# Методы  для работы со словарями
# keys () - Одинаковые ключи
d1, d2 = {"a": 1, "b": 2}, {"a": 3, "c": 4, "d": 5}
print(d1.keys() & d2.keys())
# {'a'}

# Методы  для работы со словарями
# keys () - Уникальные ключи
d1, d2 = {"a": 1, "b": 2}, {"a": 3, "c": 4, "d": 5}
print(d1.keys() ^ d2.keys())
# {'c', 'b', 'd'}

# Методы  для работы со словарями
# values ()
# возвращает объект dict_ values, содержащий все значения словаря. Этот
# объект поддерживает итерации.

d = {"a": 1, "b": 2}
print(d.values())   # Получаем объект dict_values
# dict_values([1, 2])
print(list(d.values()))  # Получаем список значений
# [1, 2]
print([v for v in d.values()])
# [1, 2]

# items ()
# возвращает объект dict_items, содержащий все юпочи и значения в виде кортежей.
# Этот объект поддерживает итерации.

d = {"a": 1, "b": 2}
print(d.items()) # Получаем объект dict_items
# dict_items([('a', 1), ('b', 2)])
print(list(d.items()))  # Получаем список кортежей
# [('a', 1), ('b', 2)]

# <Ключ> in <Словарь>
# проверяет существование указанного юпоча в словаре. Если kluch найден,
# то возвращается значение тrue, в противном случае - False.

d = {"a": 1, "b": 2}
print("a" in d)  # Ключ существует
# True
print("c" in d)   # Ключ не существует
# False

# <Ключ> not in <Словарь>
# проверяет отсутствие указанного юпоча в словаре. Если такового Ключа нет, то возвращается значение True,
# в противном случае - False. Примеры:

d = {"a": 1, "b": 2}
print("c" not in d) # Ключ не существует
# True
print("a" not in d)  # Ключ существует
# False

# get ( <Ключ> [, <Значение по умолчанию>] )
# если ключ присутствует в словаре, то метод
# возвращает значение, соответствующее этому Ключу. Если ключ отсутствует, то возвращается None или значение,
# указанное во втором параметре

d = {"a": 1, "b": 2}
print(d.get("a"), d.get("c"), d.get("c", 800))
# (1, None, 800)

# setdefault (<Ключ> [, <Значение по умолчанию>])
# если Ключ присутствует в словаре,
# то метод возвращает значение, соответствующее этому ключу. Если ключ отсутствует, то создает в словаре новый элемент
# со значением, указанным во втором параметре. Если второй параметр не указан, значением нового элемента будет None.

d = {"a": 1, "b": 2}
print(d.setdefault("a"), d.setdefault("c"), d.setdefault("d", 0))
# (1, None, 0)print()
print(d)
# {'a': 1, 'c': None, 'b': 2, 'd': 0}

# рор ( <Ключ> [, <Значение по умолчанию> ])
# удаляет элемент с указанным ключ ом и
# возвращает его значение. Если ключ отсутствует, то возврашается значение из второго параметра.
# Если ключ отсутствует, и второй параметр не указан, возбуждается исключение KeyError.
#
d = {"a": 1, "b": 2, "c": 3}
print(d.pop("a"), d.pop("n", 0))

# popitem()
# удаляет произвольный элемент и возвращает кортеж из ключа и значения.
# Если словарь пустой, возбуждается исключение KeyError.
#
d = {"a": 1, "b": 2}
print(d.popitem())
# ('a', 1)
print(d.popitem())

# clear ()
# удаляет все элементы словаря. Метод ничего не возвращает в качестве значения.
#
d = {"a": 1, "b": 2}
d.clear()    # Удаляем все элементы
print(d)  # Словарь теперь пустой
# {}

# update ()
# uрdаtе(<Ключ1>=<Значение1>[, ... , <КлючN>=<ЗначениеN>])
# добавляет элементы в словарь. Метод изменяет текущий словарь и ничего
# не возвращает.
#
d = {"a": 1, "b": 2}
d.update(c=3, d=4)
print(d)

# update ()
# uрdаtе(<Словарь>)

d = {"a": 1, "c": 3, "b": 2, "d": 4}
d.update({"c": 10, "d": 20})   # Словарь
print(d) # Значения элементов перезаписаны