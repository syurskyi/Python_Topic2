# # -*- coding: utf-8 -*-
#
# # OrderedDict
# #
# # Модуль Python collections имеет еще один замечательный наследуемый класс dict под названием OrderedDict.
# # Как подразумевается в его названии, этот словарь отслеживает порядок ключей после их добавления.
# # Если вы создадите обычный dict, вы заметите, что данные в нем неупорядоченные:
#
# d _ 'banana' 3 'apple' 4 'pear' 1 'orange' 2
# print(d)
# # {'apple': 4, 'banana': 3, 'orange': 2, 'pear': 1}
#
# # Каждый раз, когда вы выводите этот код, порядок может быть разный. Иногда бывают ситуации, когда вам нужно выполнить
# # цикл над ключами в вашем словаре в определенном порядке. Например, в моей практике был случай, когда мне нужно было
# # отсортировать ключи, чтобы я мог перебрать их по порядку. Чтобы сделать это, вы можете выполнить следующее:
#
# d = {'banana'  3 'apple' 4 'pear' 1 'orange' 2
#
# keys _ d.ke..
# keys _ so.. ke..
#
# ___ key i_ ke..
#     print ke. d ke.
#
# # apple 4
# # banana 3
# # orange 2
# # pear 1
#
# # Давайте создадим экземпляр OrderedDict, используя оригинал dict, но на этапе создания мы отсортируем ключи
# # в этом словаре:
#
#
# f.. c.. ____ O..
#
# d _ 'banana' 3 'apple' 4 'pear' 1 'orange' 2
# new_d _ O.. so.. d.it..
#
# print(new_d)
# # OrderedDict([('apple', 4), ('banana', 3), ('orange', 2), ('pear', 1)])
#
# ___ key i_ new_d
#     print ke. n.._d ke.
#
# # apple 4
# # banana 3
# # orange 2
# # pear 1
#
# # десь мы создали наш OrderedDict, сортируя его при помощи встроенной функции Python sorted. Функция sorted берет
# # объекты словаря, который является списком кортежей, отображающих пары ключей словаря. Данная функция сортирует их,
# # затем передает в OrderedDict, который сохраняет указанный порядок. Таким образом, когда мы выводим ключи и значения,
# # они будут в том порядке, который мы и ожидаем. Если вы создадите цикл над обычным словарем
# # (с неотсортированным списком ключей), порядок будет меняться каждый раз. Обратите внимание на то, что если
# # вы добавляете новые ключи, они будут расположены в конце OrderedDict, без автоматической сортировки.
# # Также стоит отметить, что когда вы сравниваете два OrderedDicts, они не только будут тестировать объекты на
# # равенство, но также на то, корректен ли указанный порядок. Обычный словарь только смотрит на содержимое словаря,
# # не обращая никакого внимание на порядок этого содержимого. Наконец, OrderedDicts содержит два новых метода в
# # Python 3: popitem и move_to_end.
# #
# #     Метод popitem возвращает и удаляет пары (ключей или объектов).
# #     Метод move_to_end двигает существующий ключ в любой конец OrderedDict. Объект будет смещен в правый угол,
# #     если последний аргумент OrderedDict указан как True (это по умолчанию), или в начало, если он указан как False.
# #
# # Любопытно, но OrderedDicts поддерживает обратную итерацию, используя встроенную функцию reversed:
#
# ___ key i_ rev.. new_d
#     print ke. n._d ke.
#
# # pear 1
# # orange 2
# # banana 3
# # apple 4
