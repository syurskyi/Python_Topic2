# Named Tuples - Modifying and Extending

from collections import namedtuple
Point2D = namedtuple('Point2D', 'x y')

# The objects generated by namedtuple generated classes are immutable.
# In other words the following will not work:

origin = Point2D(10, 0)
# origin.x = 0  # ERROR

# ---------------------------------------------------------------------------
# AttributeError                            Traceback (most recent call last)
# <ipython-input-4-ebd2d3bb5d60> in <module>()
# ----> 1 origin.x = 0
#
# AttributeError: can't set attribute

# However, we may want to "change" the value of one of the coordinates of our origin variable.
# This is just like strings, we have to create a new version of the tuple, and assign it to the same label.
# Suppose we want to change the x-coordinate of our origin to something else, but retain whatever the y-coordinate was.

origin = Point2D(0, origin.y)
print(origin)
# Point2D(x=0, y=0)

# Of course this could become quite unwieldy when we have a larger number of properties and we only need to change
# a single item:

Stock = namedtuple('Stock', 'symbol year month day open high low close')
djia = Stock('DJIA', 2018, 1, 25, 26_313, 26_458, 26_260, 26_393)

# To update the close property for example, we could write:

djia = Stock(djia.symbol, djia.year, djia.month, djia.day, djia.open, djia.high, djia.low, 26_394)

# Now that was quite painfu
# We can be a bit more clever about this and use tuple unpacking and argument unpacking as follows:

*values, _ = djia

# We didn't care about the close price since we are replacing it, hence the underscore variable name.
# And we now have everything else in a list:

print(values)
# ['DJIA', 2018, 1, 25, 26313, 26458, 26260]

# And now we are going to use the * again, but this time to unpack the list into separate arguments when we call the Stock initializer:

djia = Stock(*values, 26_393)
print(djia)
# Stock(symbol='DJIA', year=2018, month=1, day=25, open=26313, high=26458, low=26260, close=26393)

# This is much better than our first attempt!
# But this approach does not always work, what happens if we want to change a values somewhere in the middle? Or two values?
# We cannot do: *first, month, *last = djia
# That would make no sense whatsoever! (and Python will tell you so!)
# Maybe slicing and unpacking can work here...

print(djia)
# Stock(symbol='DJIA', year=2018, month=1, day=25, open=26313, high=26458, low=26260, close=26393)

# We could try slicing:

print(djia[:3])
# ('DJIA', 2018, 1)

djia[:3] + (26,) + djia[4:]
# ('DJIA', 2018, 1, 26, 26313, 26458, 26260, 26393)

# So now we could use this to create a new StockPrice instance:

djia2 = Stock(*(djia[:3] + (26,) + djia[4:]))
print(djia2)
# Stock(symbol='DJIA', year=2018, month=1, day=26, open=26313, high=26458, low=26260, close=26393)

# This works, but that's quite cumbersome...
# And it gets worse - suppose we want to modify the year and day using this approach:

print(djia)
# Stock(symbol='DJIA', year=2018, month=1, day=25, open=26313, high=26458, low=26260, close=26393)

values = djia[0:1] + (2019,) + djia[2:3] + (26,) + djia[4:]
print(values)
# ('DJIA', 2019, 1, 26, 26313, 26458, 26260, 26393)

djia3 = Stock(*values)
print(djia3)
# Stock(symbol='DJIA', year=2019, month=1, day=26, open=26313, high=26458, low=26260, close=26393)

# Or, if you want to avoid unpacking the values into the multiple positional arguments required by
# the Stock constructor, we can make us of the _make class method that can use an iterable:

djia4 = Stock._make(values)
print(djia4)
# Stock(symbol='DJIA', year=2019, month=1, day=26, open=26313, high=26458, low=26260, close=26393)

# This is really getting too complex.
# Fortunately there's a better way!
# The namedtuple implementation also provides another instance method called _replace which takes keyword-only
# arguments. That method will make a copy of the current tuple and substitute property values based on
# the keyword-only arguments passed in.

print(djia)
# Stock(symbol='DJIA', year=2018, month=1, day=25, open=26313, high=26458, low=26260, close=26393)

print(id(djia))
# 2785020879400

djia5 = djia._replace(year=2019, day=26)
print(djia5)
# Stock(symbol='DJIA', year=2019, month=1, day=26, open=26313, high=26458, low=26260, close=26393)

print(djia)
# Stock(symbol='DJIA', year=2018, month=1, day=25, open=26313, high=26458, low=26260, close=26393)

print(id(djia5))
# 2785020880480

# Much better!!
