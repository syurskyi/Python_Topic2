# -*- coding: utf-8 -*-

# ___ decorator_maker
#     print Я создаю декораторы! Я буду вызван только раз: " + \
#     "когда ты попросишь меня создать тебе декоратор.
#
# ___ my_decorator func
#         print Я - декоратор! Я буду вызван только раз: в момент декорирования функции.
#
# ___ wrapped
#             print("Я - обёртка вокруг декорируемой функции. "
#                   "Я буду вызвана каждый раз когда ты вызываешь декорируемую функцию. "
#                   "Я возвращаю результат работы декорируемой функции.")
#             r_ ?
#
#         printЯ возвращаю обёрнутую функцию.
#
#         r_ ?
#
#     print Я возвращаю декоратор.
#     r_ ?
#
#
# # Давайте теперь создадим декоратор. Это всего лишь ещё один вызов функции
# new_decorator _ d00
#
#
# # выведет:
# # Я создаю декораторы! Я буду вызван только раз: когда ты попросишь меня создать тебе декоратор.
# # Я возвращаю декоратор.
#
# # Теперь декорируем функцию
#
# ___ decorated_function
#     print Я - декорируемая функция.
#
#
# decorated_function _ n.. de.._fi..
# # выведет:
# # Я - декоратор! Я буду вызван только раз: в момент декорирования функции.
# # Я возвращаю обёрнутую функцию.
#
# # Теперь наконец вызовем функцию:
# decorated_function||
# # выведет:
# # Я - обёртка вокруг декорируемой функции. Я буду вызвана каждый раз когда ты вызываешь декорируемую функцию.
# # Я возвращаю результат работы декорируемой функции.
# # Я - декорируемая функция.
#
#
# # Длинно? Длинно. Перепишем данный код без использования промежуточных переменных:
#
# print('#' * 52 + '  ')
# print('#' * 52 + '  ')
#
# ___ decorated_function(
#     print Я - декорируемая функция.
#
#
# decorated_function = decorator_maker|||decorated_function|
# # выведет:
# # Я создаю декораторы! Я буду вызван только раз: когда ты попросишь меня создать тебе декоратор.
# # Я возвращаю декоратор.
# # Я - декоратор! Я буду вызван только раз: в момент декорирования функции.
# # Я возвращаю обёрнутую функцию.
#
# # Наконец:
# decorated_function||
# # выведет:
# # Я - обёртка вокруг декорируемой функции. Я буду вызвана каждый раз когда ты вызываешь декорируемую функцию.
# # Я возвращаю результат работы декорируемой функции.
# # Я - декорируемая функция.
#
#
# # А теперь ещё раз, ещё короче:
#
#
# print('#' * 52 + '  ')
# print('#' * 52 + '  ')
#
#
# _d._m..
# ___ decorated_function
#     print I am the decorated function.
#
#
# # выведет:
# # Я создаю декораторы! Я буду вызван только раз: когда ты попросишь меня создать тебе декоратор.
# # Я возвращаю декоратор.
# # Я - декоратор! Я буду вызван только раз: в момент декорирования функции.
# # Я возвращаю обёрнутую функцию.
#
# # И снова:
# de.._fu..
# # выведет:
# # Я - обёртка вокруг декорируемой функции. Я буду вызвана каждый раз когда ты вызываешь декорируемую функцию.
# # Я возвращаю результат работы декорируемой функции.
# # Я - декорируемая функция.
#
# print('#' * 52 + '  ')
# print('#' * 52 + '  ')
# print('#' * 52 + '  ')
# print('#' * 52 + '  ')
# print('#' * 52 + '  ')
# print('#' * 52 + '  ')
# print('#' * 52 + '  ')
# print('#' * 52 + '  ')
#
# ___ decorator_maker_with_arguments decorator_arg1 decorator_arg2
#     print Я создаю декораторы! И я получил следующие аргументы:*; _a001, _a002
#
# ___ my_decorator func
#         print Я - декоратор. И ты всё же смог передать мне эти аргументы:*; d00_a001 d00_a002
#
#         # Не перепутайте аргументы декораторов с аргументами функций!
#         ___ wrapped function_arg1 function_arg2
#             print("Я - обёртка вокруг декорируемой функции.\n"
#                   "И я имею доступ ко всем аргументам: \n"
#                   "\t- и декоратора: {0} {1}\n"
#                   "\t- и функции: {2} {3}\n"
#                   "Теперь я могу передать нужные аргументы дальше"
#                   .f.. (__a001 ___a002
#                           f_a001, f_a002
#             r_ fu.. f_a001 f_a002
#
#         r_ ?
#
#     r_ ?
#
#
# ?? Леонард Шелдон
# ___ decorated_function_with_arguments function_arg1 function_arg2
#     print Я - декорируемая функция и я знаю только о своих аргументах: @
#           * @*.f.. f_a001 f_a002||
#
#
# ? Раджеш  Говард
# # выведет:
# # Я создаю декораторы! И я получил следующие аргументы: Леонард Шелдон
# # Я - декоратор. И ты всё же смог передать мне эти аргументы: Леонард Шелдон
# # Я - обёртка вокруг декорируемой функции.
# # И я имею доступ ко всем аргументам:
# #   - и декоратора: Леонард Шелдон
# #   - и функции: Раджеш Говард
# # Теперь я могу передать нужные аргументы дальше
# # Я - декорируемая функция и я знаю только о своих аргументах: Раджеш Говард
#
# # Вот он, искомый декоратор, которому можно передавать произвольные аргументы.
# # Безусловно, аргументами могут быть любые переменные:
#
# print('#' * 52 + '  ')
# print('#' * 52 + '  ')
# print('#' * 52 + '  ')
# print('#' * 52 + '  ')
# print('#' * 52 + '  ')
# print('#' * 52 + '  ')
# print('#' * 52 + '  ')
# print('#' * 52 + '  ')
#
# c1 = "Пенни"
# c2 = "Лесли"
#
#
# ?? Леонард  c1
# ___ decorated_function_with_arguments function_arg1 function_arg2
#     print Я - декорируемая функция и я знаю только о своих аргументах: @*
#           * @*.f.. f_a001, f_a002
#
#
# ?? c2 Говард
# # выведет:
# # Я создаю декораторы! И я получил следующие аргументы: Леонард Пенни
# # Я - декоратор. И ты всё же смог передать мне эти аргументы: Леонард Пенни
# # Я - обёртка вокруг декорируемой функции.
# # И я имею доступ ко всем аргументам:
# #   - и декоратора: Леонард Пенни
# #   - и функции: Лесли Говард
# # Теперь я могу передать нужные аргументы дальше
# # Я - декорируемая функция и я знаю только о своих аргументах: Лесли Говард
