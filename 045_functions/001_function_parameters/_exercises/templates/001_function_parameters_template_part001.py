#!/usr/bin/python
# -*- coding: utf-8 -*-

#  Defining a function and calling it

# func

#func():
    # Текст до инструкции return
    # Возвращаемое значение
    # print("Эта инструкция никогда не будет выполнена")

# print(_())

# print()
# ######################################################################################################################
# Function definitions

# print_ok
#     """ Пример функции без параметров """
#     print("Сообщение при удачно выполненной операции")

# echo m
#     """ Пример функции с параметром """
#     print(_)


# summa x y
#     """ Пример функции с параметрами,
#         возвращающей сумму двух переменных """
#     x  y

# print()
# ######################################################################################################################
# Callback function

# summa x y
#     x + y

# func f a b
#     """ Через переменную f будет доступна ссылка на
#         функцию summa() """
#     f a b  # Вызываем функцию summa()

# Передаем ссылку на функцию в качестве параметра
# v  f_(s_  10 20)

# summa x y
#     """ Суммирование двух чисел """
#     x  y

# d_(summa)
# summa.__n__
# summa.__c__.c__v_
# summa.__d__

# print()
# ######################################################################################################################
# Definition of functions depending on conditions
# n Введите 1 для вызова первой функции:
# __ n __ 1
#     ___ echo
#         Вы ввели число 1
# ___
#     ___ echo
#         Альтернативная функция

# echo()  # Вызываем функцию
# input()

# ___ echo
#     Вы ввели число 1

# ___ echo
#     Альтернативная функция

# echo()  # Всегда выводит "Альтернативная функция"

# print()
# ######################################################################################################################
# Optional parameters

# summa x y=2  # y — необязательный параметр
#     x + y

# a - s__5
# Переменной a будет присвоено значение 7
# b - s__10 50  # Переменной b будет присвоено значение 60

# ___ summa x y
#     x + y

# print(s__10 20  # Выведет: 30

# print()
# ######################################################################################################################
# Key Matching

# ___ summa x y)
#     r_ x + y
#
# print(s_(y=20 x=10))  # Сопоставление по ключам
#
# ___ summa a=2 b=3 c=4  # Все параметры являются необязательными
#     ___ a + b + c
#
# print(s_(2, 3, 20))  # Позиционное присваивание
# print(s_(c=20))  # Сопоставление по ключам
#
# print()
# ######################################################################################################################
# Example of passing values ​​from… tuple and list
# ___ summa a b c
#     r_ a + b + c
# t1, arr = (1, 2, 3), [1, 2, 3]
# print(s_(_t1))                  # Распаковываем кортеж
# print(s_(_arr))                 # Распаковываем список
# t2 = (2, 3)
# print(s_(1_ _t2))               # Можно комбинировать значения
#
# print()
# ######################################################################################################################
# Example of transferring values ​​f…the dictionary
# ___ summa a b c
#     ___ a + b + c
#
# d1 = {"a": 1, "b": 2, "c": 3}
# print(s_(__d1))  # Распаковываем словарь
# t, d2 = (1, 2), {"c": 3}
# print(s_(_t_ __d2))  # Можно комбинировать значения
#
# ___ func(a, b):
#     a, b = 20, "str"
#
#
# x, s = 80, "test"
# func(x, s)  # Значения переменных x и s не изменяются
# print(x, s)  # Выведет: 80 test
#
#
# ___ func a b
#     a_0_ b_"a"_ = "str", 800
#
# x = [1, 2, 3]  # Список
# y = {"a": 1, "b": 2}  # Словарь
# f_(x, y)  # Значения будут изменены!!!
# print(x, y)  # Выведет: ['str', 2, 3] {'a': 800, 'b': 2}
#
# print()
# ######################################################################################################################
# Passing a variable object in a function

# ___ func a b
#     a  a___  # Создаем поверхностную копию списка
#     b  b.c_  # Создаем поверхностную копию словаря
#     a_0__ b_"a"_ = "str", 800
#
# x = [1, 2, 3]  # Список
# y = {"a": 1, "b": 2}  # Словарь
# f_(x, y)  # Значения останутся прежними
# print(x, y)  # Выведет: [1, 2, 3] {'a': 1, 'b': 2}
#
# f_(x_:__ y.c_())
#
# ___ func a=[]
#     a.a_(2)
#     ___ a
#
# print(f_())  # Выведет: [2]
# print(f_())  # Выведет: [2, 2]
# print(f_())  # Выведет: [2, 2, 2]
#
# ___ func a=N_
#     # Создаем новый список, если значение равно None
#     i_ a i_ N_
#         a = __
#     a.a_(2)
#     ___ a
#
# print(f_())  # Выведет: [2]
# print(f_([1]))  # Выведет: [1, 2]
# print(f_())  # Выведет: [2]
#
# print()
# ######################################################################################################################
#  Saving transferred data in a tuple

# ___ summa__t_
#     """ Функция принимает произвольное количество параметров """
#     res = 0
#     f_ i i_ t  # Перебираем кортеж с переданными параметрами
#         r_ += i
#     ___ r_
#
# print(s_(10, 20))  # Выведет: 30
# print(s_(10, 20, 30, 40, 50, 60))  # Выведет: 210
#
# ___ summa x y=5 _t  # Комбинация параметров
#     res = x + y
#     f_ i i_ t:  # Перебираем кортеж с переданными параметрами
#         r_ += i
#     r_ r_
#
# print(s_(10))  # Выведет: 15
# print(s_(10, 20, 30, 40, 50, 60))  # Выведет: 210
#
# print()
# ######################################################################################################################
# Saving the transferred data in the dictionary

# ___ func __d
#     f_ i i_ d     # Перебираем словарь с переданными параметрами
#         print("{0} => {1}".f_ i d_i_) e_=" ")
# f_(a=1, b=2, c=3) # Выведет: a => 1 c => 3 b => 2
#
# print()
# ######################################################################################################################
# Combining parameters.

# ___ func _t __d
#     """ Функция примет любые параметры """
#     f_ i i_ t
#         print i e_=" ")
#     f_ i i_ d  # Перебираем словарь с переданными параметрами
#         print("{0} => {1}".f_i d_i_) e_=" ")
#
# f_(35, 10, a=1, b=2, c=3)  # Выведет: 35 10 a => 1 c => 3 b => 2
# f_(10)  # Выведет: 10
# f_(a=1, b=2)  # Выведет: a => 1 b => 2
#
# ___ func _t a b=10 __d
#     print t a b d
#
# f_(35, 10, a=1, c=3)  # Выведет: (35, 10) 1 10 {'c': 3}
# f_(10, a=5)  # Выведет: (10,) 5 10 {}
# f_(a=1, b=2)  # Выведет: () 1 2 {}
# f_(1, 2, 3)  # Ошибка. Параметр a обязателен!
#
# ___ func x=1 y=2 * a b=10
#     print x y a b
#
# f_(35, 10, a=1)  # Выведет: 35 10 1 10
# f_(10, a=5)  # Выведет: 10 2 5 10
# f_(a=1, b=2)  # Выведет: 1 2 1 2
# f_(a=1, y=8, x=7)  # Выведет: 7 8 1 10
# f_(1, 2, 3)  # Ошибка. Параметр a обязателен!
#
# print()
# Avoiding Mutable Argument Changes

# changer a b
#     a = 2
#     b_0_ = 'spam'

# X = 1

# L = [1, 2]
# c__X L_:_  # Pass a copy, so our 'L' does not change

# print(X)
# print(L)

# changer a b
#     b _ b_ _ _  # Copy input list so we don't impact caller
#     a = 2
#     b_0_ = 'spam'  # Changes our list copy only


# L = [1, 2]
# changer(X, tuple(L))    # Pass a tuple, so changes are errors

# print()
# ######################################################################################################################
# Simulating Output Parameters and Multiple Results

# multiple x y
#     x = 2  # Changes local names only
#     y = [3, 4]
#     x, y  # Return new values in a tuple

# X = 1
# L = [1, 2]

# X, L = _(X, L)  # Assign results to caller's names
# print(X, L)

# print()
# ######################################################################################################################
# Keywords

# ___ f a b c print a b c
#
# f(1, 2, 3)
# f(c=3, b=2, a=1)
# f(1, c=3, b=2)
#
# ___ f_(name='Bob', age=40, job='dev'): print(name, age, job)
#
# func('Serg,', 40, ', nuker')
#
# print()
# ######################################################################################################################
# Defaults

# ___ f a b_2 c_3): print a b c
#
# f(1)
# f(a=1)
# f(1, 4)
# f(1, 4, 5)
# f(1, c=6)
#
# print()
# ######################################################################################################################
# _combining keywords and defaults

# ___ func spam eggs toast_0 ham_0  # First 2 required
#     print spam eggs toast ham
#
# func(1, 2)  # Output: (1, 2, 0, 0)
# func(1, ham=1, eggs=0)  # Output: (1, 0, 0, 1)
# func(spam=1, eggs=0)  # Output: (1, 0, 0, 0)
# func(toast=1, eggs=2, spam=3)  # Output: (3, 2, 1, 0)
# func(1, 2, 3, 4)  # Output: (1, 2, 3, 4)

# print()
# ######################################################################################################################
# Applying functions generically

# ___ func a b c d print a b c d
#
# args = (2, 3)
# args += (4, 5)
# print(args)
# f_(_args)
#
# ___ tracer func _pargs __kargs  # Accept arbitrary arguments
#     print 'calling:' f_.__n
#     r_ f_ _pargs __kargs  # Pass along arbitrary arguments
#
# ___ func a b c d
#     r_ a b c d
#
# # def func(a, b, c, d):
# #    return a + b + c + d
#
# print t_(f_ 1 2 c_3 d_4
#
# print()
# ######################################################################################################################
# Python 3.X Keyword-Only Arguments

# ___ kwonly a  _b c
#     print a b c
#
# kwonly 1 2 c_3
# kwonly a_1 c_3
#
# ___ kwonly a _ b c
#     print a b c
#
# kwonly 1 c_3 b_2
# kwonly(c_3 b_2 a_1
#
# ___ kwonly a _ b_ spam c_ ham
#     print a b c
#
# kwonly 1
# kwonly 1 c_3
# kwonly a_1
# kwonly c_3 b_2 a_1
#
# ___ kwonly a _ b c_ spam
#     print a b c
#
# kwonly 1 b_ eggs
#
# ___ kwonly a _ b_1 c d_2
#     print a b c d
#
# kwonly 3 c_4
# kwonly 3 c_4 b_5
#
# print()
# ######################################################################################################################
# Ordering rules
# Collect args in header

# ___ f a _b c_6 __d  print a b c d

# print()
# ######################################################################################################################
# Ordering rules
#  Default used

# ___ f a _b c_6 __d
# f 1 2 3 x_4 y_5

# print()
# ######################################################################################################################
# Ordering rules
#  Override default

# ___ f a _b c_6 __d
# f 1 2 3 x_4 y_5 c_7

# print()
# ######################################################################################################################
# Ordering rules
# Anywhere in keywords

# ___ f a _b c_6 __d
# f 1 2 3 c_7 x_4 y_5

# print()
# ######################################################################################################################
# Ordering rules
# c is not keyword-only

# ___ f a _b c_6 __d
# ___ f a c_6 _b __d print a b c d

# print()
# ######################################################################################################################
# Ordering rules
# KW-only between * and **

# ___ f a _b c_6 __d print a b c d

# print()
# ######################################################################################################################
# Ordering rules
# Unpack args at call

# ___ f a _b c_6 __d
# f 1 _(2 3) __d_ x_4 y_5

# print()
# ######################################################################################################################
# Ordering rules
# Override default

# ___ f a _b c_6 __d
# f 1 _(2, 3) c_7 __d_ x_4 y_5

# print()
# ######################################################################################################################
# Ordering rules
# After or before *

# ___ f a _b c_6 __d
# f 1 c_7 _(2, 3) __d_ x_4 y_5

# print()
# ######################################################################################################################
# Ordering rules
# Keyword-only in

# ___ f a _b c_6 __d
# f 1 _(2 3) __d_(x_4 y_5 c_7

# print()

# Functions can receive keyword arguments

# ___ has_keywords my_T_ name_ computer
#     __ my
#         print My name
#     ____
#         print Not mine name

# has_keywords name_ phone

# print()
# ######################################################################################################################
# Function can receive unlimited number of positional arguments

# ___ has_args _args
#     print A lot of arguments:  args

# has_args 1 demo [1, 2] (9 string))

# print()
# ######################################################################################################################
# Functions can receive unlimited number of keyword arguments

# ___ has_kwargs __kwargs
#     print A lot of keyword arguments kwargs
#     print kwargs is a dict t_(kwargs))

# has_kwargs any_possible_N_ values=[] you_wish_1

# print()
# ######################################################################################################################
# Function that will cover 100% of arguments

# ___ send_anything_args __kwargs
#     print args args
#     print kwargs kwargs

# send_anything 1 15 'a' value_T_ new_value_F_

# print()
# ######################################################################################################################
# Functions can use global variables

# GLOBAL_VAR = 3
#
# ___ using_global_var x
#     print x * G_
#
# using_global_var 12
#
# print()
# ######################################################################################################################
# Functions can use global variables
# But if we want to write to it, we should state it explicitly

# ___ writing_to_global_var value
#     g_ GLOBAL_VAR
#     G___ _ value
#     print it is now G_
#
# writing_to_global_var 9
#
# print()
# ######################################################################################################################
# Functions are objects and can be nested

# ___ outer_function value
#     ___ some_inner
#         print Value was  value

    # r_ s_

# v _ o_ some
# print _it is a function_  v c__v__
# v()  # 'some' will be printed

# print()

# ######################################################################################################################
#  Объявление функции hello_world

# Объявление функции hello_world
# ___ hello_world
#     print Hello, World!

# Вызов функции hello_world
# hello_world()

# print()
# ######################################################################################################################
# procedure-with-parameter

# limit - формальный параметр функции print_numbers
# ___ print_numbers limit
#     ___ i __ r_ limit
#         print i

# Здесь вызывается функция print_numbers, а её формальный
# параметр limit замещается фактическим параметром 10
# print_numbers 10

# print()
# ######################################################################################################################
# using-builtin-functions

# Функция из прошлого примера
# ___ print_numbers limit
#     ___ i __ r_ limit
#         print i

# Читаем ввод пользователя при помощи стандартной
# функции input, конструируем из него число при
# помощи стандартной функции int и записываем в
# переменную n
# n _ i_(i_ Введите n:
# Вызываем функцию print_numbers с фактическим параметром n
# print_numbers n

# print()
# ######################################################################################################################
# multiple-functions

# Функция из прошлого примера
# ___ print_numbers limit
#     __ i __ r_ limit
#         print i

# Любое логически завершённое действие следует помещать в функцию
# ___ main
#     n _ i_(i_ Введите n:
#     print_numbers _

# Вызов главной функции
# main()

# print()
# ######################################################################################################################
# main-function

# ___ main
#     print  Hello, World!

# Главную функцию желательно вызывать так
# (таким образом функция будет вызвана только если
# данный файл был запущен как главный; это важно
# для приложений, состоящих из нескольких модулей)
# __ __n_ __  __m_
#     m_

# print()
# ######################################################################################################################
# simple-function

# ___ add_numbers a b
#     r_ a + b  # возврат суммы параметров
#
#
# x _ add_numbers 2 3
# print(x)
#
# print()
# ######################################################################################################################
# procedures-as-functions

# ___ procedure
#     print I return nothing... Or I do?
#
# value = p_
# print Результат функции:_ value
#
# print()
# ######################################################################################################################
# multiple-return-statements

# Эта функция возвращает аргумент, умноженный на два,
# если он отрицательный, или аргумент, умноженный на три,
# если он больше или равен нулю
# ___ function(
#     __ x < 0
#         r_ x * 2
#     ___
#         r_ x * 3
#
# ___ main():
#     # Вывод значений функции в диапазоне [-3, 3]
#     ___ i __ range(-3, 4):
#         y = f_(i)
#         print 'function('_ i_ ') = '_ y s_-''
#
# __ __n_ __ __m_
#     ___
#
# print()
# ######################################################################################################################
# return-in-procedures

# ___ hello name
#     # Если имя пустое, выходим из функции
#     __ n_ n_
#         r_
#     print 'Hello, '_ n__ !_ s_-''
#
# hello Alex
# hello ''
# hello Python
#
# print()
# ######################################################################################################################
# functions-in-expressions

# ___ add a b
#     r_ a + b
#
# ___ sub a b
#     r_ a - b
#
# # Вызов функции может быть частью выражения
# print(a_(2, 3) + s_(2, 3))  # => print((2 + 3) + (2 - 3))
#
# print()
# ######################################################################################################################
# keyword-arguments

# Функция, которая принимает три аргумента
# ___ info object color price
#     print Объект:_ object
#     print Цвет:_ color
#     print Цена:  price
#     print()
#
# # передача параметров в прямом порядке
# i_  ручка _ синий _ 1
# # передача параметров в произвольном порядке
# info price_5 object_чашка color_оранжевый
# # можно смешивать оба способа, но сначала должны идти параметры,
# # которые передаются в прямом порядке
# info кофе _ price_10 color_ чёрный
#
# print()
# ######################################################################################################################
# optional-arguments

# Если параметр name не задан, то name = 'Alex'
# ___ hello name_'Alex'
#     print 'Hello, ' name '!' s_-''
#
# hello Python
# hello()
#
# print()

