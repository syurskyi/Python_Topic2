# # -*- coding: utf-8 -*-
#
# _______ __

# Для поиска первого совпадения с шаблоном предназначены следующие функции и методы:
# + match () - проверяет соответствие с началом строки. Формат метода:
# match(<Cтpoкa>[, <Начальная позиция>[, <Конечная позиция>]])
# Если соответствие найдено, то возвращается объект Match, в противном случае возвращается значение None

# p _ __.c.. _ ? ?    # match for any digit between 0 and 9 | One or more occurrences
# print("Найдено" __ ?.m..("str123") ____ "Нет")
# # Нет
# print("Найдено" __ ?.m..("str123", 3) ____ "Нет")
# # Найдено
# print("Найдено" __ ?.m..("123str") ____ "Нет")
# # Найдено
#
# Вместо метода match () можно воспользоваться функцией match (). Формат функции:
# rе.mаtсh(<Шаблон>, <Строка>[, <Модификатор>])
# В параметре <Шаблон> указывается строка с регулярным выражением или скомпилированное реrулярное выражение.
# В параметре <Модификатор> можно указать флаги, используемые в функции compi le ( ) . Если соответствие найдено,
# то возвращается объект Match, в противном случае возвращается значение None.

# p _ _  ? ?   # match for any digit between 0 and 9 |  One or more occurrences
# print("Найдено" __ __.m..(?, "str123") ____ "Нет")
# # Нет
# print("Найдено" __ __.m..(?, "123str") ____ "Нет")
# # Найдено
# p _ __.c.. _ ? ? # match for any digit between 0 and 9 |  One or more occurrences
# print("Найдено" __ __.m..(?, "123str") ____ "Нет")
# # Найдено
#
# search ( > - проверяет соответствие с любой частью строки. Формат метода:
# search(<Cтpoкa>[, <Начальная позиция>[, <Конечная позиция>]])
# Если соответствие найдено, то возвращается объект мatch, в противном случае возвращается значение None.
#
# p _ __.c.. _ ? ?   # match for any digit between 0 and 9 |   One or more occurrences
# print("Найдено" __ ?.s..("str123") ____ "Нет")
# # Найдено
# print("Найдено" __ ?.s..("123str") ____ "Нет")
# # Найдено
# print("Найдено" __ ?.s..("123str", 3) ____ "Нет")
# # Нет
#
# Вместо метода search () можно воспользоваться функцией search (). Формат функции:
# re.search(<ШaCлoн>, <Строка>[, <Модификатор>))
# В параметре <Шаблон> указывается строка с регулярным выражением или скомпилированное регулярное выражение.
# В параметре <Модификатор> можно указать флаги, используемые в функции compi le ( ) . Если соответствие найдено,
# то возвращается объект
# Match, в противном случае возвращается значение None.
#
# p _ _ ? ?       # match for any digit between 0 and 9 |   One or more occurrences
# print("Найдено" __ __.s..(?, "str123") ____ "Нет")
# # Найдено
# p _ __.c.. _ ? ?    # match for any digit between 0 and 9 |   One or more occurrences
# print("Найдено" __ __.s..(?, "str123") ____ "Нет")
# # Найдено
#
# fullmatch () - выполняет проверку, соответствует ли переданная строка регулярному
# выражению целиком. Под.11ержка этого метода появилась в Python 3.4. Формат:
# fullmatch (<Строка> [, <1-iача�1ьная ::1сзи:.u1я> [, <Конечная пози1..1.ия>]])
# Если соответствие найдено, то возвращается объект Match, в противном случае возвращается None
#
# p _ __.c..("? ython")               # Match "Python" or "python"
# print("Найдено" __ ?.f..("Python") ____ "Нет")
# # Найдено
# print("Найдено" __ ?.f..("py") ____ "Нет")
# # Нет
# print("Найдено" __ ?.f..("PythonWare") ____ "Нет")
# # Нет
# print("Найдено" __ ?.f..("PythonWare", 0, 6) ____ "Нет")
# # Найдено
#
# Вместо метода fullmatch () можно воспользоваться функцией fullшatch (). Формат
# функции:
# re. fullmatch (<Шаблон>, <Строка> [, <I-1одификатор>] )
# В параметре <Шаблон> указывается строка с регулярным выражением или скомпилированное регулярное выражение.
# В параметре <Иодификатор> можно указать флаги, используемые в функции compi le ( ) . Если строка полностью совпадает
# с шаблоном, возвращается объект мatch, в противном случае возвращается значение None.
#
# p _ " ? ython"                      # Match "Python" or "python"
# print("Найдено" __ __.f..(?, "Python") ____ "Нет")
# # Найдено
# print("Найдено" __ __.f..(?, "py") ____ "Нет")
# # Нет
